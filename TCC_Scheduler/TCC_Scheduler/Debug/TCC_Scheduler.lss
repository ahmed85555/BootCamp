
TCC_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000798  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800092  00800092  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001158  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaa  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e5  00000000  00000000  000034fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 01 	call	0x268	; 0x268 <main>
  8a:	0c 94 ca 03 	jmp	0x794	; 0x794 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
static void Apply(GPIO* Gpio,uint8 Copy_u8Value,uint8 PinNum);
static uint8 Apply_Read(GPIO* Gpio,uint8 PinNum);
static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection);
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	98 f0       	brcs	.+38     	; 0xbc <DIO_WritePin+0x2a>
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
  96:	98 ef       	ldi	r25, 0xF8	; 248
  98:	98 0f       	add	r25, r24
  9a:	98 30       	cpi	r25, 0x08	; 8
  9c:	90 f0       	brcs	.+36     	; 0xc2 <DIO_WritePin+0x30>
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
  9e:	90 ef       	ldi	r25, 0xF0	; 240
  a0:	98 0f       	add	r25, r24
  a2:	98 30       	cpi	r25, 0x08	; 8
  a4:	a0 f1       	brcs	.+104    	; 0x10e <DIO_WritePin+0x7c>
	{
		Local_Copy_Address=GPIOC_DIO;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
  a6:	98 ee       	ldi	r25, 0xE8	; 232
  a8:	98 0f       	add	r25, r24
  aa:	98 30       	cpi	r25, 0x08	; 8
  ac:	98 f5       	brcc	.+102    	; 0x114 <DIO_WritePin+0x82>
	{
		Local_Copy_Address=GPIOD_DIO;
  ae:	e0 e3       	ldi	r30, 0x30	; 48
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	32 c0       	rjmp	.+100    	; 0x118 <DIO_WritePin+0x86>
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
  b4:	88 51       	subi	r24, 0x18	; 24
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	40 f4       	brcc	.+16     	; 0xca <DIO_WritePin+0x38>
  ba:	0a c0       	rjmp	.+20     	; 0xd0 <DIO_WritePin+0x3e>
static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection);
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
	{
		Local_Copy_Address=GPIOA_DIO;
  bc:	e9 e3       	ldi	r30, 0x39	; 57
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <DIO_WritePin+0x3e>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
  c2:	89 2f       	mov	r24, r25
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copy_Address=GPIOB_DIO;
  c4:	e6 e3       	ldi	r30, 0x36	; 54
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <DIO_WritePin+0x3e>
	
	
}

static void Apply(GPIO* Gpio,uint8 Copy_u8Value,uint8 PinNum){
	uint8 Local_Copyu8_Actuall_Pin=0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <DIO_WritePin+0x3e>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
  ce:	89 2f       	mov	r24, r25
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	switch (Copy_u8Value)
  d0:	66 23       	and	r22, r22
  d2:	79 f0       	breq	.+30     	; 0xf2 <DIO_WritePin+0x60>
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	29 f5       	brne	.+74     	; 0x122 <DIO_WritePin+0x90>
	{
		case High:Set_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
  d8:	42 81       	ldd	r20, Z+2	; 0x02
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_WritePin+0x54>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_WritePin+0x50>
  ea:	cb 01       	movw	r24, r22
  ec:	84 2b       	or	r24, r20
  ee:	82 83       	std	Z+2, r24	; 0x02
  f0:	08 95       	ret
		case LOW:Clear_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
  f2:	42 81       	ldd	r20, Z+2	; 0x02
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_WritePin+0x6e>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	8a 95       	dec	r24
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_WritePin+0x6a>
 104:	cb 01       	movw	r24, r22
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	82 83       	std	Z+2, r24	; 0x02
	}
	
	Apply(Local_Copy_Address,PinValue,PinNum);
	
	
}
 10c:	08 95       	ret
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copy_Address=GPIOC_DIO;
 10e:	e3 e3       	ldi	r30, 0x33	; 51
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_WritePin+0x86>
#include <avr/interrupt.h>
static void Apply(GPIO* Gpio,uint8 Copy_u8Value,uint8 PinNum);
static uint8 Apply_Read(GPIO* Gpio,uint8 PinNum);
static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection);
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	GPIO* Local_Copy_Address=0;
 114:	e0 e0       	ldi	r30, 0x00	; 0
 116:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 118:	90 ef       	ldi	r25, 0xF0	; 240
 11a:	98 0f       	add	r25, r24
 11c:	98 30       	cpi	r25, 0x08	; 8
 11e:	b8 f2       	brcs	.-82     	; 0xce <DIO_WritePin+0x3c>
 120:	c9 cf       	rjmp	.-110    	; 0xb4 <DIO_WritePin+0x22>
 122:	08 95       	ret

00000124 <DIO_ReadPin>:
		case High:Set_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
		case LOW:Clear_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
	}
	
}
uint8 DIO_ReadPin(uint8 PinNum){
 124:	98 2f       	mov	r25, r24
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	98 f0       	brcs	.+38     	; 0x150 <DIO_ReadPin+0x2c>
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
 12a:	88 ef       	ldi	r24, 0xF8	; 248
 12c:	89 0f       	add	r24, r25
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	90 f0       	brcs	.+36     	; 0x156 <DIO_ReadPin+0x32>
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	89 0f       	add	r24, r25
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	b0 f0       	brcs	.+44     	; 0x166 <DIO_ReadPin+0x42>
	{
		Local_Copy_Address=GPIOC_DIO;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 13a:	88 ee       	ldi	r24, 0xE8	; 232
 13c:	89 0f       	add	r24, r25
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	a8 f4       	brcc	.+42     	; 0x16c <DIO_ReadPin+0x48>
	{
		Local_Copy_Address=GPIOD_DIO;
 142:	e0 e3       	ldi	r30, 0x30	; 48
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	14 c0       	rjmp	.+40     	; 0x170 <DIO_ReadPin+0x4c>
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 148:	98 51       	subi	r25, 0x18	; 24
 14a:	98 30       	cpi	r25, 0x08	; 8
 14c:	b0 f0       	brcs	.+44     	; 0x17a <DIO_ReadPin+0x56>
 14e:	07 c0       	rjmp	.+14     	; 0x15e <DIO_ReadPin+0x3a>
}
uint8 DIO_ReadPin(uint8 PinNum){
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
	{
		Local_Copy_Address=GPIOA_DIO;
 150:	e9 e3       	ldi	r30, 0x39	; 57
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	12 c0       	rjmp	.+36     	; 0x17a <DIO_ReadPin+0x56>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
 156:	98 2f       	mov	r25, r24
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copy_Address=GPIOB_DIO;
 158:	e6 e3       	ldi	r30, 0x36	; 54
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	0e c0       	rjmp	.+28     	; 0x17a <DIO_ReadPin+0x56>
	
	
}

static uint8 Apply_Read(GPIO* Gpio,uint8 PinNum){
	uint8 Local_Copyu8_Actuall_Pin=0;
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0c c0       	rjmp	.+24     	; 0x17a <DIO_ReadPin+0x56>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
 162:	98 2f       	mov	r25, r24
 164:	0a c0       	rjmp	.+20     	; 0x17a <DIO_ReadPin+0x56>
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copy_Address=GPIOC_DIO;
 166:	e3 e3       	ldi	r30, 0x33	; 51
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_ReadPin+0x4c>
		case LOW:Clear_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
	}
	
}
uint8 DIO_ReadPin(uint8 PinNum){
	GPIO* Local_Copy_Address=0;
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	89 0f       	add	r24, r25
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	40 f7       	brcc	.-48     	; 0x148 <DIO_ReadPin+0x24>
 178:	f4 cf       	rjmp	.-24     	; 0x162 <DIO_ReadPin+0x3e>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	
	return Get_Bit(Gpio->PIN,Local_Copyu8_Actuall_Pin);
 17a:	40 81       	ld	r20, Z
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copy_Address=GPIOD_DIO;
	}
	
	return Apply_Read(Local_Copy_Address,PinNum);	
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	09 2e       	mov	r0, r25
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_ReadPin+0x64>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_ReadPin+0x60>
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	24 23       	and	r18, r20
 190:	35 23       	and	r19, r21
 192:	a9 01       	movw	r20, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_ReadPin+0x76>
 196:	55 95       	asr	r21
 198:	47 95       	ror	r20
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_ReadPin+0x72>
 19e:	ca 01       	movw	r24, r20
	
	
}
 1a0:	08 95       	ret

000001a2 <DIO_SetPinDirection>:
	
	
}
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	a8 f0       	brcs	.+42     	; 0x1d0 <DIO_SetPinDirection+0x2e>
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
 1a6:	98 ef       	ldi	r25, 0xF8	; 248
 1a8:	98 0f       	add	r25, r24
 1aa:	98 30       	cpi	r25, 0x08	; 8
 1ac:	a0 f0       	brcs	.+40     	; 0x1d6 <DIO_SetPinDirection+0x34>
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 1ae:	90 ef       	ldi	r25, 0xF0	; 240
 1b0:	98 0f       	add	r25, r24
 1b2:	98 30       	cpi	r25, 0x08	; 8
 1b4:	08 f4       	brcc	.+2      	; 0x1b8 <DIO_SetPinDirection+0x16>
 1b6:	4d c0       	rjmp	.+154    	; 0x252 <DIO_SetPinDirection+0xb0>
	{
		Local_Copy_Address=GPIOC_DIO;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 1b8:	98 ee       	ldi	r25, 0xE8	; 232
 1ba:	98 0f       	add	r25, r24
 1bc:	98 30       	cpi	r25, 0x08	; 8
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_SetPinDirection+0x20>
 1c0:	4b c0       	rjmp	.+150    	; 0x258 <DIO_SetPinDirection+0xb6>
	{
		Local_Copy_Address=GPIOD_DIO;
 1c2:	e0 e3       	ldi	r30, 0x30	; 48
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	4a c0       	rjmp	.+148    	; 0x25c <DIO_SetPinDirection+0xba>
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 1c8:	88 51       	subi	r24, 0x18	; 24
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	40 f4       	brcc	.+16     	; 0x1de <DIO_SetPinDirection+0x3c>
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <DIO_SetPinDirection+0x42>
}
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	GPIO* Local_Copy_Address=0;
	if ((PinNum<=pin7) && (PinNum>=pin0))
	{
		Local_Copy_Address=GPIOA_DIO;
 1d0:	e9 e3       	ldi	r30, 0x39	; 57
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <DIO_SetPinDirection+0x42>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
 1d6:	89 2f       	mov	r24, r25
	{
		Local_Copy_Address=GPIOA_DIO;
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copy_Address=GPIOB_DIO;
 1d8:	e6 e3       	ldi	r30, 0x36	; 54
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <DIO_SetPinDirection+0x42>
}


static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection){
	
	uint8 Local_Copyu8_Actuall_Pin=0;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <DIO_SetPinDirection+0x42>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
 1e2:	89 2f       	mov	r24, r25
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	switch(PinDirection){
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	b1 f0       	breq	.+44     	; 0x214 <DIO_SetPinDirection+0x72>
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <DIO_SetPinDirection+0x4e>
 1ea:	62 30       	cpi	r22, 0x02	; 2
 1ec:	29 f1       	breq	.+74     	; 0x238 <DIO_SetPinDirection+0x96>
 1ee:	08 95       	ret
		case Input_PUll_UP:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Set_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
 1f0:	41 81       	ldd	r20, Z+1	; 0x01
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinDirection+0x5c>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinDirection+0x58>
 202:	cb 01       	movw	r24, r22
 204:	96 2f       	mov	r25, r22
 206:	90 95       	com	r25
 208:	94 23       	and	r25, r20
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	92 81       	ldd	r25, Z+2	; 0x02
 20e:	89 2b       	or	r24, r25
 210:	82 83       	std	Z+2, r24	; 0x02
 212:	08 95       	ret
		case INPUT_WITHOUT_PULL:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Clear_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
 214:	41 81       	ldd	r20, Z+1	; 0x01
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x80>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x7c>
 226:	cb 01       	movw	r24, r22
 228:	80 95       	com	r24
 22a:	94 2f       	mov	r25, r20
 22c:	98 23       	and	r25, r24
 22e:	91 83       	std	Z+1, r25	; 0x01
 230:	92 81       	ldd	r25, Z+2	; 0x02
 232:	89 23       	and	r24, r25
 234:	82 83       	std	Z+2, r24	; 0x02
 236:	08 95       	ret
		case OUTPUT:Set_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);break;
 238:	41 81       	ldd	r20, Z+1	; 0x01
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinDirection+0xa4>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinDirection+0xa0>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	81 83       	std	Z+1, r24	; 0x01
		Local_Copy_Address=GPIOD_DIO;
	}
	
	Apply_Dir(Local_Copy_Address,PinNum,PinDirection);
	
}
 250:	08 95       	ret
	{
		Local_Copy_Address=GPIOB_DIO;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
	{
		Local_Copy_Address=GPIOC_DIO;
 252:	e3 e3       	ldi	r30, 0x33	; 51
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0xba>
	return Get_Bit(Gpio->PIN,Local_Copyu8_Actuall_Pin);
	
	
}
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	GPIO* Local_Copy_Address=0;
 258:	e0 e0       	ldi	r30, 0x00	; 0
 25a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	98 0f       	add	r25, r24
 260:	98 30       	cpi	r25, 0x08	; 8
 262:	08 f4       	brcc	.+2      	; 0x266 <DIO_SetPinDirection+0xc4>
 264:	be cf       	rjmp	.-132    	; 0x1e2 <DIO_SetPinDirection+0x40>
 266:	b0 cf       	rjmp	.-160    	; 0x1c8 <DIO_SetPinDirection+0x26>

00000268 <main>:
#include "DIO_Interface.h"
#include "Task.h"
#include "Utilites.h"

int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	e2 97       	sbiw	r28, 0x32	; 50
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
	
   	/* initialize pins 12 and 13 and 14 on portB.4 and portB.5 and portB.6 to be output */
   	DIO_SetPinDirection(pin12,OUTPUT);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
   	DIO_SetPinDirection(pin13,OUTPUT);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
   	DIO_SetPinDirection(pin14,OUTPUT);
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	8e e0       	ldi	r24, 0x0E	; 14
 290:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(pin15,OUTPUT); 
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(pin10,INPUT_WITHOUT_PULL);     
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	/*Initilaize Scheduler*/
    Scheduler_Init();
 2a4:	0e 94 a6 01 	call	0x34c	; 0x34c <Scheduler_Init>
	/*Task one attributes */
	TCB Task1={led1_task,t_1000ms,NUM_ONE,t_1000ms,NUM_ONE};
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	e0 e6       	ldi	r30, 0x60	; 96
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	de 01       	movw	r26, r28
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x4a>
	/*Create Task one*/
	Scheduler_Add_Task(&Task1);
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 98 02 	call	0x530	; 0x530 <Scheduler_Add_Task>
	/*Task Two attributes */
	TCB Task2={led2_task,t_2000ms,NUM_ZERO,t_2000ms,NUM_TWO};
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	ea e6       	ldi	r30, 0x6A	; 106
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	de 01       	movw	r26, r28
 2ca:	1b 96       	adiw	r26, 0x0b	; 11
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	8a 95       	dec	r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x64>
	Scheduler_Add_Task(&Task2);
 2d4:	ce 01       	movw	r24, r28
 2d6:	0b 96       	adiw	r24, 0x0b	; 11
 2d8:	0e 94 98 02 	call	0x530	; 0x530 <Scheduler_Add_Task>
	/*Task one attributes */
	TCB Task3={led3_task,t_3000ms,NUM_THREE,t_3000ms,NUM_THREE};
 2dc:	8a e0       	ldi	r24, 0x0A	; 10
 2de:	e4 e7       	ldi	r30, 0x74	; 116
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	de 01       	movw	r26, r28
 2e4:	55 96       	adiw	r26, 0x15	; 21
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	8a 95       	dec	r24
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x7e>
	/*Create Task one*/
	Scheduler_Add_Task(&Task3);
 2ee:	ce 01       	movw	r24, r28
 2f0:	45 96       	adiw	r24, 0x15	; 21
 2f2:	0e 94 98 02 	call	0x530	; 0x530 <Scheduler_Add_Task>
	/*Task Two attributes */
	TCB Task4={led4_task,t_4000ms,NUM_FOUR,t_4000ms,NUM_FOUR};	
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	ee e7       	ldi	r30, 0x7E	; 126
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	de 01       	movw	r26, r28
 2fe:	5f 96       	adiw	r26, 0x1f	; 31
 300:	01 90       	ld	r0, Z+
 302:	0d 92       	st	X+, r0
 304:	8a 95       	dec	r24
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x98>
	/*Create Task Two*/
	Scheduler_Add_Task(&Task4);
 308:	ce 01       	movw	r24, r28
 30a:	4f 96       	adiw	r24, 0x1f	; 31
 30c:	0e 94 98 02 	call	0x530	; 0x530 <Scheduler_Add_Task>
	/*led four will toggle every 5 minutes when click on button1 the task4 will blocked on it's last state */
	TCB Task5={Task_remove,t_5000ms,NUM_SIX,t_5000ms,NUM_SEVEN};
 310:	8a e0       	ldi	r24, 0x0A	; 10
 312:	e8 e8       	ldi	r30, 0x88	; 136
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	de 01       	movw	r26, r28
 318:	99 96       	adiw	r26, 0x29	; 41
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	8a 95       	dec	r24
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xb2>
	Scheduler_Add_Task(&Task5);	
 322:	ce 01       	movw	r24, r28
 324:	89 96       	adiw	r24, 0x29	; 41
 326:	0e 94 98 02 	call	0x530	; 0x530 <Scheduler_Add_Task>
	/*Start Scheduler*/
	Scheduler_Start();
 32a:	0e 94 11 02 	call	0x422	; 0x422 <Scheduler_Start>
	

}
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	e2 96       	adiw	r28, 0x32	; 50
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <set_flag>:
* Description: This function Sets flag with one with every tick 

****************************************************************************/
static void set_flag(){
	/*Set the flag*/
	flag=NUM_ONE;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <flag>
 34a:	08 95       	ret

0000034c <Scheduler_Init>:
****************************************************************************/
void Scheduler_Init() 
{
	
	uint32 i=0;
	for (i=0;i<MAX_SIZE;i++)
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
	{
		System_Tasks[i].task=NULL;
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	c9 01       	movw	r24, r18
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	e8 0f       	add	r30, r24
 366:	f9 1f       	adc	r31, r25
 368:	e9 56       	subi	r30, 0x69	; 105
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	11 82       	std	Z+1, r1	; 0x01
 36e:	10 82       	st	Z, r1
		System_Tasks[i].Periodicity=0;
 370:	13 82       	std	Z+3, r1	; 0x03
 372:	12 82       	std	Z+2, r1	; 0x02
		System_Tasks[i].Delay=0;
 374:	17 82       	std	Z+7, r1	; 0x07
 376:	16 82       	std	Z+6, r1	; 0x06
		System_Tasks[i].Priority=0;
 378:	15 82       	std	Z+5, r1	; 0x05
 37a:	14 82       	std	Z+4, r1	; 0x04
****************************************************************************/
void Scheduler_Init() 
{
	
	uint32 i=0;
	for (i=0;i<MAX_SIZE;i++)
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255
 380:	25 30       	cpi	r18, 0x05	; 5
 382:	31 05       	cpc	r19, r1
 384:	29 f7       	brne	.-54     	; 0x350 <Scheduler_Init+0x4>
		System_Tasks[i].Delay=0;
		System_Tasks[i].Priority=0;
	}
	
	
}
 386:	08 95       	ret

00000388 <TTC_Scheduler>:
*  INPUT:NOTHING
*  OUTPUT:NOTHING
* Description: This function Called every tick to execute the tasks sequentially 

****************************************************************************/
void TTC_Scheduler(){
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
	
	uint32 i=NUM_ZERO;
	/*Decrease the Delay till equal zero for each task then make it equal periodicity when it's execution time comes*/
	for (i=NUM_ZERO;i<size;i++)
 390:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 394:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 398:	89 2b       	or	r24, r25
 39a:	f1 f1       	breq	.+124    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
	{
	if(NUM_ZERO==(System_Tasks[i].Delay--))
 3a0:	ce 01       	movw	r24, r28
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	fe 01       	movw	r30, r28
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e8 0f       	add	r30, r24
 3b6:	f9 1f       	adc	r31, r25
 3b8:	e9 56       	subi	r30, 0x69	; 105
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	86 81       	ldd	r24, Z+6	; 0x06
 3be:	97 81       	ldd	r25, Z+7	; 0x07
 3c0:	9c 01       	movw	r18, r24
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	31 09       	sbc	r19, r1
 3c6:	37 83       	std	Z+7, r19	; 0x07
 3c8:	26 83       	std	Z+6, r18	; 0x06
 3ca:	89 2b       	or	r24, r25
 3cc:	e9 f4       	brne	.+58     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		/* if id doesn't equal R which remains remove then execute this task */
		if ((System_Tasks[i].id != 'R'))
 3ce:	ce 01       	movw	r24, r28
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	fe 01       	movw	r30, r28
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	e8 0f       	add	r30, r24
 3e4:	f9 1f       	adc	r31, r25
 3e6:	e9 56       	subi	r30, 0x69	; 105
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	80 85       	ldd	r24, Z+8	; 0x08
 3ec:	91 85       	ldd	r25, Z+9	; 0x09
 3ee:	82 35       	cpi	r24, 0x52	; 82
 3f0:	91 05       	cpc	r25, r1
 3f2:	51 f0       	breq	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
		System_Tasks[i].task();
 3f4:	8f 01       	movw	r16, r30
 3f6:	01 90       	ld	r0, Z+
 3f8:	f0 81       	ld	r31, Z
 3fa:	e0 2d       	mov	r30, r0
 3fc:	09 95       	icall
		System_Tasks[i].Delay=System_Tasks[i].Periodicity;
 3fe:	f8 01       	movw	r30, r16
 400:	82 81       	ldd	r24, Z+2	; 0x02
 402:	93 81       	ldd	r25, Z+3	; 0x03
 404:	97 83       	std	Z+7, r25	; 0x07
 406:	86 83       	std	Z+6, r24	; 0x06
****************************************************************************/
void TTC_Scheduler(){
	
	uint32 i=NUM_ZERO;
	/*Decrease the Delay till equal zero for each task then make it equal periodicity when it's execution time comes*/
	for (i=NUM_ZERO;i<size;i++)
 408:	21 96       	adiw	r28, 0x01	; 1
 40a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 40e:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 412:	c8 17       	cp	r28, r24
 414:	d9 07       	cpc	r29, r25
 416:	20 f2       	brcs	.-120    	; 0x3a0 <TTC_Scheduler+0x18>
		System_Tasks[i].task();
		System_Tasks[i].Delay=System_Tasks[i].Periodicity;
		}
	}
	}
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	08 95       	ret

00000422 <Scheduler_Start>:
*  INPUT:NOTHING
*  OUTPUT:NOTHING
* Description: This function Starts The Scheduler 

****************************************************************************/
void Scheduler_Start(){
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	2a 97       	sbiw	r28, 0x0a	; 10
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
****************************************************************************/
static void Sorting_Priority()
{
	uint32 i=NUM_ZERO;
	uint32 j=NUM_ZERO;
	for (i=0;i<size;i++)
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	63 c0       	rjmp	.+198    	; 0x502 <Scheduler_Start+0xe0>
	{
		for(j=i+1;j<size;j++)
 43c:	bc 01       	movw	r22, r24
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 446:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 44a:	62 17       	cp	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	08 f0       	brcs	.+2      	; 0x452 <Scheduler_Start+0x30>
 450:	57 c0       	rjmp	.+174    	; 0x500 <Scheduler_Start+0xde>
 452:	9b 01       	movw	r18, r22
		{
			if (System_Tasks[i].Priority > System_Tasks[j].Priority  )
 454:	ac 01       	movw	r20, r24
 456:	44 0f       	add	r20, r20
 458:	55 1f       	adc	r21, r21
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	84 0f       	add	r24, r20
 468:	95 1f       	adc	r25, r21
 46a:	89 56       	subi	r24, 0x69	; 105
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	7c 01       	movw	r14, r24
 470:	44 e0       	ldi	r20, 0x04	; 4
 472:	e4 0e       	add	r14, r20
 474:	f1 1c       	adc	r15, r1
 476:	f7 01       	movw	r30, r14
 478:	a0 81       	ld	r26, Z
 47a:	b1 81       	ldd	r27, Z+1	; 0x01
 47c:	a9 01       	movw	r20, r18
 47e:	44 0f       	add	r20, r20
 480:	55 1f       	adc	r21, r21
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	f9 01       	movw	r30, r18
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	e4 0f       	add	r30, r20
 492:	f5 1f       	adc	r31, r21
 494:	e9 56       	subi	r30, 0x69	; 105
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	44 81       	ldd	r20, Z+4	; 0x04
 49a:	55 81       	ldd	r21, Z+5	; 0x05
 49c:	4a 17       	cp	r20, r26
 49e:	5b 07       	cpc	r21, r27
 4a0:	28 f5       	brcc	.+74     	; 0x4ec <Scheduler_Start+0xca>

****************************************************************************/

static void Swap(TCB* Task1,TCB* Task2){
	TCB temp;
	temp=*(Task1);
 4a2:	4a e0       	ldi	r20, 0x0A	; 10
 4a4:	fc 01       	movw	r30, r24
 4a6:	de 01       	movw	r26, r28
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	4a 95       	dec	r20
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <Scheduler_Start+0x88>
	*(Task1)=*(Task2);
 4b2:	a9 01       	movw	r20, r18
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	f9 01       	movw	r30, r18
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	4e 0f       	add	r20, r30
 4c8:	5f 1f       	adc	r21, r31
 4ca:	49 56       	subi	r20, 0x69	; 105
 4cc:	5f 4f       	sbci	r21, 0xFF	; 255
 4ce:	1a e0       	ldi	r17, 0x0A	; 10
 4d0:	fa 01       	movw	r30, r20
 4d2:	dc 01       	movw	r26, r24
 4d4:	01 90       	ld	r0, Z+
 4d6:	0d 92       	st	X+, r0
 4d8:	1a 95       	dec	r17
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <Scheduler_Start+0xb2>
	*(Task2)=temp;
 4dc:	1a e0       	ldi	r17, 0x0A	; 10
 4de:	fe 01       	movw	r30, r28
 4e0:	31 96       	adiw	r30, 0x01	; 1
 4e2:	da 01       	movw	r26, r20
 4e4:	01 90       	ld	r0, Z+
 4e6:	0d 92       	st	X+, r0
 4e8:	1a 95       	dec	r17
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <Scheduler_Start+0xc2>
{
	uint32 i=NUM_ZERO;
	uint32 j=NUM_ZERO;
	for (i=0;i<size;i++)
	{
		for(j=i+1;j<size;j++)
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
 4f0:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 4f4:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 4f8:	24 17       	cp	r18, r20
 4fa:	35 07       	cpc	r19, r21
 4fc:	08 f4       	brcc	.+2      	; 0x500 <Scheduler_Start+0xde>
 4fe:	bb cf       	rjmp	.-138    	; 0x476 <Scheduler_Start+0x54>
****************************************************************************/
static void Sorting_Priority()
{
	uint32 i=NUM_ZERO;
	uint32 j=NUM_ZERO;
	for (i=0;i<size;i++)
 500:	cb 01       	movw	r24, r22
 502:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 506:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 50a:	82 17       	cp	r24, r18
 50c:	93 07       	cpc	r25, r19
 50e:	08 f4       	brcc	.+2      	; 0x512 <Scheduler_Start+0xf0>
 510:	95 cf       	rjmp	.-214    	; 0x43c <Scheduler_Start+0x1a>

****************************************************************************/
void Scheduler_Start(){
	
	Sorting_Priority();
	Timer_Init();
 512:	0e 94 7e 03 	call	0x6fc	; 0x6fc <Timer_Init>
	/*Call back the set flag function to set the flag*/
	Set_CallBack(set_flag);
 516:	82 ea       	ldi	r24, 0xA2	; 162
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 9c 03 	call	0x738	; 0x738 <Set_CallBack>
	while (1)
	{
		if (flag==NUM_ONE)
 51e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <flag>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	e1 f7       	brne	.-8      	; 0x51e <Scheduler_Start+0xfc>
		{
			flag=NUM_ZERO;
 526:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <flag>
			TTC_Scheduler();
 52a:	0e 94 c4 01 	call	0x388	; 0x388 <TTC_Scheduler>
 52e:	f7 cf       	rjmp	.-18     	; 0x51e <Scheduler_Start+0xfc>

00000530 <Scheduler_Add_Task>:
*  OUTPUT:NOTHING
* Description: This function Adds task to the array of tasks

****************************************************************************/
uint8 Scheduler_Add_Task(TCB* Task)
{
 530:	dc 01       	movw	r26, r24
/*Check Wether the size exceeds the max and if not assigns the values to the array of structure */	
	if(size<MAX_SIZE){
 532:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 536:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 53a:	05 97       	sbiw	r24, 0x05	; 5
 53c:	08 f0       	brcs	.+2      	; 0x540 <Scheduler_Add_Task+0x10>
 53e:	7d c0       	rjmp	.+250    	; 0x63a <Scheduler_Add_Task+0x10a>
		/*assign values to the task */
		System_Tasks[size].task=Task->task;
 540:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 544:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 548:	2d 91       	ld	r18, X+
 54a:	3c 91       	ld	r19, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	fc 01       	movw	r30, r24
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	e8 0f       	add	r30, r24
 562:	f9 1f       	adc	r31, r25
 564:	e9 56       	subi	r30, 0x69	; 105
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	31 83       	std	Z+1, r19	; 0x01
 56a:	20 83       	st	Z, r18
		System_Tasks[size].Periodicity=Task->Periodicity;
 56c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 570:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	2d 91       	ld	r18, X+
 578:	3c 91       	ld	r19, X
 57a:	13 97       	sbiw	r26, 0x03	; 3
 57c:	fc 01       	movw	r30, r24
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	e8 0f       	add	r30, r24
 590:	f9 1f       	adc	r31, r25
 592:	e9 56       	subi	r30, 0x69	; 105
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	33 83       	std	Z+3, r19	; 0x03
 598:	22 83       	std	Z+2, r18	; 0x02
		System_Tasks[size].Delay=Task->Periodicity;
 59a:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 59e:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	8d 91       	ld	r24, X+
 5a6:	9c 91       	ld	r25, X
 5a8:	13 97       	sbiw	r26, 0x03	; 3
 5aa:	f9 01       	movw	r30, r18
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	e2 0f       	add	r30, r18
 5be:	f3 1f       	adc	r31, r19
 5c0:	e9 56       	subi	r30, 0x69	; 105
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	97 83       	std	Z+7, r25	; 0x07
 5c6:	86 83       	std	Z+6, r24	; 0x06
		System_Tasks[size].Priority=Task->Priority;
 5c8:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 5cc:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 5d0:	14 96       	adiw	r26, 0x04	; 4
 5d2:	8d 91       	ld	r24, X+
 5d4:	9c 91       	ld	r25, X
 5d6:	15 97       	sbiw	r26, 0x05	; 5
 5d8:	f9 01       	movw	r30, r18
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	e2 0f       	add	r30, r18
 5ec:	f3 1f       	adc	r31, r19
 5ee:	e9 56       	subi	r30, 0x69	; 105
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	95 83       	std	Z+5, r25	; 0x05
 5f4:	84 83       	std	Z+4, r24	; 0x04
		System_Tasks[size].id = Task->id;
 5f6:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 5fa:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 5fe:	18 96       	adiw	r26, 0x08	; 8
 600:	8d 91       	ld	r24, X+
 602:	9c 91       	ld	r25, X
 604:	19 97       	sbiw	r26, 0x09	; 9
 606:	f9 01       	movw	r30, r18
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	e2 0f       	add	r30, r18
 61a:	f3 1f       	adc	r31, r19
 61c:	e9 56       	subi	r30, 0x69	; 105
 61e:	ff 4f       	sbci	r31, 0xFF	; 255
 620:	91 87       	std	Z+9, r25	; 0x09
 622:	80 87       	std	Z+8, r24	; 0x08
		size++;
 624:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 628:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 632:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
		 return TRUE;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	08 95       	ret
	}else{
		return FALSE;
 63a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 63c:	08 95       	ret

0000063e <Remove_Task>:
* Description: This function Removes the task by id

****************************************************************************/
void Remove_Task(uint32 Task_id){
	uint32 i=NUM_ZERO;
	for (i=NUM_ZERO;i<size;i++)
 63e:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 642:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 646:	23 2b       	or	r18, r19
 648:	81 f1       	breq	.+96     	; 0x6aa <Remove_Task+0x6c>
 64a:	40 e0       	ldi	r20, 0x00	; 0
 64c:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (System_Tasks[i].id == Task_id)
		{
			/* Block Task*/
			System_Tasks[i].id= 'R' ;
 64e:	62 e5       	ldi	r22, 0x52	; 82
 650:	70 e0       	ldi	r23, 0x00	; 0
****************************************************************************/
void Remove_Task(uint32 Task_id){
	uint32 i=NUM_ZERO;
	for (i=NUM_ZERO;i<size;i++)
	{
		if (System_Tasks[i].id == Task_id)
 652:	9a 01       	movw	r18, r20
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	22 0f       	add	r18, r18
 65e:	33 1f       	adc	r19, r19
 660:	fa 01       	movw	r30, r20
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	e2 0f       	add	r30, r18
 668:	f3 1f       	adc	r31, r19
 66a:	e9 56       	subi	r30, 0x69	; 105
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	20 85       	ldd	r18, Z+8	; 0x08
 670:	31 85       	ldd	r19, Z+9	; 0x09
 672:	28 17       	cp	r18, r24
 674:	39 07       	cpc	r19, r25
 676:	81 f4       	brne	.+32     	; 0x698 <Remove_Task+0x5a>
		{
			/* Block Task*/
			System_Tasks[i].id= 'R' ;
 678:	9a 01       	movw	r18, r20
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	22 0f       	add	r18, r18
 680:	33 1f       	adc	r19, r19
 682:	22 0f       	add	r18, r18
 684:	33 1f       	adc	r19, r19
 686:	fa 01       	movw	r30, r20
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e2 0f       	add	r30, r18
 68e:	f3 1f       	adc	r31, r19
 690:	e9 56       	subi	r30, 0x69	; 105
 692:	ff 4f       	sbci	r31, 0xFF	; 255
 694:	71 87       	std	Z+9, r23	; 0x09
 696:	60 87       	std	Z+8, r22	; 0x08
* Description: This function Removes the task by id

****************************************************************************/
void Remove_Task(uint32 Task_id){
	uint32 i=NUM_ZERO;
	for (i=NUM_ZERO;i<size;i++)
 698:	4f 5f       	subi	r20, 0xFF	; 255
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 6a0:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 6a4:	42 17       	cp	r20, r18
 6a6:	53 07       	cpc	r21, r19
 6a8:	a0 f2       	brcs	.-88     	; 0x652 <Remove_Task+0x14>
 6aa:	08 95       	ret

000006ac <led1_task>:


	/*Task Number one */
void led1_task(){
   /*Write one to the write high to the three leds*/
	DIO_WritePin(pin12,High);
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	8c e0       	ldi	r24, 0x0C	; 12
 6b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 6b4:	08 95       	ret

000006b6 <led2_task>:
}
/*Task Number TWo */

void led2_task(){
/*Write one to the write high to the three leds*/
	DIO_WritePin(pin13,High);
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	8d e0       	ldi	r24, 0x0D	; 13
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 6be:	08 95       	ret

000006c0 <led3_task>:
 
}

void led3_task(){
/*Write one to the write high to the three leds*/
	DIO_WritePin(pin14,High);
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	8e e0       	ldi	r24, 0x0E	; 14
 6c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 6c8:	08 95       	ret

000006ca <led4_task>:
}
void led4_task(){
/*Write zero to the write high to the three leds*/
	 
	if(DIO_ReadPin(pin15)==LOW)
 6ca:	8f e0       	ldi	r24, 0x0F	; 15
 6cc:	0e 94 92 00 	call	0x124	; 0x124 <DIO_ReadPin>
 6d0:	81 11       	cpse	r24, r1
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <led4_task+0x14>
	{
		DIO_WritePin(pin15,High);
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 6dc:	08 95       	ret
	}else{
		
		DIO_WritePin(pin15,LOW);
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	8f e0       	ldi	r24, 0x0F	; 15
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 6e6:	08 95       	ret

000006e8 <Task_remove>:
	}
 
}
/* Task to remove when click the switch*/
void Task_remove(){
	if(DIO_ReadPin(pin10)==High){
 6e8:	8a e0       	ldi	r24, 0x0A	; 10
 6ea:	0e 94 92 00 	call	0x124	; 0x124 <DIO_ReadPin>
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	21 f4       	brne	.+8      	; 0x6fa <Task_remove+0x12>
	Remove_Task(NUM_FOUR);
 6f2:	84 e0       	ldi	r24, 0x04	; 4
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 1f 03 	call	0x63e	; 0x63e <Remove_Task>
 6fa:	08 95       	ret

000006fc <Timer_Init>:

 
 void Timer_Init()
 {	
	/* Enable CTC Mode in TIMER 1 */	 	 
	 Clear_Bit(TIMER1->TCCRA,WGM10);
 6fc:	8f b5       	in	r24, 0x2f	; 47
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
 700:	8f bd       	out	0x2f, r24	; 47
	 Clear_Bit(TIMER1->TCCRA,WGM11);
 702:	8f b5       	in	r24, 0x2f	; 47
 704:	8d 7f       	andi	r24, 0xFD	; 253
 706:	8f bd       	out	0x2f, r24	; 47
	 Clear_Bit(TIMER1->TCCRB,WGM13);
 708:	8e b5       	in	r24, 0x2e	; 46
 70a:	8f 7e       	andi	r24, 0xEF	; 239
 70c:	8e bd       	out	0x2e, r24	; 46
	 Set_Bit(TIMER1->TCCRB,WGM12);
 70e:	8e b5       	in	r24, 0x2e	; 46
 710:	88 60       	ori	r24, 0x08	; 8
 712:	8e bd       	out	0x2e, r24	; 46
	 /* set ocra */
	
	 TIMER1->OCRAH= OCR_value >> EIGHT_SHIFT;
 714:	8e e3       	ldi	r24, 0x3E	; 62
 716:	8b bd       	out	0x2b, r24	; 43
	 TIMER1->OCRAL= OCR_value & LOW_MASK;
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	8a bd       	out	0x2a, r24	; 42
	 /* choose prescelar */
	 Set_Bit(TIMER1->TCCRB,CS00);
 71c:	8e b5       	in	r24, 0x2e	; 46
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	8e bd       	out	0x2e, r24	; 46
	 Clear_Bit(TIMER1->TCCRB,CS01);
 722:	8e b5       	in	r24, 0x2e	; 46
 724:	8d 7f       	andi	r24, 0xFD	; 253
 726:	8e bd       	out	0x2e, r24	; 46
	 Clear_Bit(TIMER1->TCCRB,CS02); 
 728:	8e b5       	in	r24, 0x2e	; 46
 72a:	8b 7f       	andi	r24, 0xFB	; 251
 72c:	8e bd       	out	0x2e, r24	; 46
	 
	 /* Enable Interrupt */
	 Set_Bit(TIMSK,OCIE1A);
 72e:	89 b7       	in	r24, 0x39	; 57
 730:	80 61       	ori	r24, 0x10	; 16
 732:	89 bf       	out	0x39, r24	; 57
	 
	 /*Enable Global Interrupt*/
	 sei();
 734:	78 94       	sei
 736:	08 95       	ret

00000738 <Set_CallBack>:
* to the argument void (*ptr)(void)

****************************************************************************/
void Set_CallBack(void (*ptr)(void)){
	
	Call_Back=ptr;
 738:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <Call_Back+0x1>
 73c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Call_Back>
 740:	08 95       	ret

00000742 <__vector_7>:
	
}

 
 ISR(TIMER1_COMPA_vect){
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	
	if (NULL != Call_Back)
 764:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <Call_Back>
 768:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <Call_Back+0x1>
 76c:	30 97       	sbiw	r30, 0x00	; 0
 76e:	09 f0       	breq	.+2      	; 0x772 <__vector_7+0x30>
	{
		Call_Back();
 770:	09 95       	icall
	}
	
 }
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <_exit>:
 794:	f8 94       	cli

00000796 <__stop_program>:
 796:	ff cf       	rjmp	.-2      	; 0x796 <__stop_program>
