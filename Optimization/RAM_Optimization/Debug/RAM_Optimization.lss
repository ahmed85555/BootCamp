
RAM_Optimization.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800100  00001066  000010da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001066  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b68  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b3  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ea  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027d  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e6       	ldi	r30, 0x66	; 102
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <main>
      8e:	0c 94 31 08 	jmp	0x1062	; 0x1062 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
    return (a<<1);
      a2:	89 81       	ldd	r24, Y+1	; 0x01
      a4:	88 0f       	add	r24, r24
}
      a6:	0f 90       	pop	r0
      a8:	df 91       	pop	r29
      aa:	cf 91       	pop	r28
      ac:	08 95       	ret

000000ae <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static inline inv_shift_rows(uint8_t *state) {
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	00 d0       	rcall	.+0      	; 0xb4 <inv_shift_rows+0x6>
      b4:	1f 92       	push	r1
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	9b 83       	std	Y+3, r25	; 0x03
      bc:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	9b 81       	ldd	r25, Y+3	; 0x03
      c2:	fc 01       	movw	r30, r24
      c4:	85 85       	ldd	r24, Z+13	; 0x0d
      c6:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	9b 81       	ldd	r25, Y+3	; 0x03
      cc:	0d 96       	adiw	r24, 0x0d	; 13
      ce:	2a 81       	ldd	r18, Y+2	; 0x02
      d0:	3b 81       	ldd	r19, Y+3	; 0x03
      d2:	f9 01       	movw	r30, r18
      d4:	21 85       	ldd	r18, Z+9	; 0x09
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	9b 81       	ldd	r25, Y+3	; 0x03
      de:	09 96       	adiw	r24, 0x09	; 9
      e0:	2a 81       	ldd	r18, Y+2	; 0x02
      e2:	3b 81       	ldd	r19, Y+3	; 0x03
      e4:	f9 01       	movw	r30, r18
      e6:	25 81       	ldd	r18, Z+5	; 0x05
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
      ec:	8a 81       	ldd	r24, Y+2	; 0x02
      ee:	9b 81       	ldd	r25, Y+3	; 0x03
      f0:	05 96       	adiw	r24, 0x05	; 5
      f2:	2a 81       	ldd	r18, Y+2	; 0x02
      f4:	3b 81       	ldd	r19, Y+3	; 0x03
      f6:	f9 01       	movw	r30, r18
      f8:	21 81       	ldd	r18, Z+1	; 0x01
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
    *(state+1)  = temp;
      fe:	8a 81       	ldd	r24, Y+2	; 0x02
     100:	9b 81       	ldd	r25, Y+3	; 0x03
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	29 81       	ldd	r18, Y+1	; 0x01
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	9b 81       	ldd	r25, Y+3	; 0x03
     10e:	fc 01       	movw	r30, r24
     110:	86 85       	ldd	r24, Z+14	; 0x0e
     112:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	9b 81       	ldd	r25, Y+3	; 0x03
     118:	0e 96       	adiw	r24, 0x0e	; 14
     11a:	2a 81       	ldd	r18, Y+2	; 0x02
     11c:	3b 81       	ldd	r19, Y+3	; 0x03
     11e:	f9 01       	movw	r30, r18
     120:	26 81       	ldd	r18, Z+6	; 0x06
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
    *(state+6)  = temp;
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	9b 81       	ldd	r25, Y+3	; 0x03
     12a:	06 96       	adiw	r24, 0x06	; 6
     12c:	29 81       	ldd	r18, Y+1	; 0x01
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
    temp        = *(state+10);
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	9b 81       	ldd	r25, Y+3	; 0x03
     136:	fc 01       	movw	r30, r24
     138:	82 85       	ldd	r24, Z+10	; 0x0a
     13a:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	9b 81       	ldd	r25, Y+3	; 0x03
     140:	0a 96       	adiw	r24, 0x0a	; 10
     142:	2a 81       	ldd	r18, Y+2	; 0x02
     144:	3b 81       	ldd	r19, Y+3	; 0x03
     146:	f9 01       	movw	r30, r18
     148:	22 81       	ldd	r18, Z+2	; 0x02
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
    *(state+2)  = temp;
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	9b 81       	ldd	r25, Y+3	; 0x03
     152:	02 96       	adiw	r24, 0x02	; 2
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	9b 81       	ldd	r25, Y+3	; 0x03
     15e:	fc 01       	movw	r30, r24
     160:	83 81       	ldd	r24, Z+3	; 0x03
     162:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	03 96       	adiw	r24, 0x03	; 3
     16a:	2a 81       	ldd	r18, Y+2	; 0x02
     16c:	3b 81       	ldd	r19, Y+3	; 0x03
     16e:	f9 01       	movw	r30, r18
     170:	27 81       	ldd	r18, Z+7	; 0x07
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	9b 81       	ldd	r25, Y+3	; 0x03
     17a:	07 96       	adiw	r24, 0x07	; 7
     17c:	2a 81       	ldd	r18, Y+2	; 0x02
     17e:	3b 81       	ldd	r19, Y+3	; 0x03
     180:	f9 01       	movw	r30, r18
     182:	23 85       	ldd	r18, Z+11	; 0x0b
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	9b 81       	ldd	r25, Y+3	; 0x03
     18c:	0b 96       	adiw	r24, 0x0b	; 11
     18e:	2a 81       	ldd	r18, Y+2	; 0x02
     190:	3b 81       	ldd	r19, Y+3	; 0x03
     192:	f9 01       	movw	r30, r18
     194:	27 85       	ldd	r18, Z+15	; 0x0f
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18
    *(state+15) = temp;
     19a:	8a 81       	ldd	r24, Y+2	; 0x02
     19c:	9b 81       	ldd	r25, Y+3	; 0x03
     19e:	0f 96       	adiw	r24, 0x0f	; 15
     1a0:	29 81       	ldd	r18, Y+1	; 0x01
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
	
}
     1a6:	00 00       	nop
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <aes_decrypt_128>:
 void inline aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t *plaintext) {
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	6b 97       	sbiw	r28, 0x1b	; 27
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
     1ce:	9f 8b       	std	Y+23, r25	; 0x17
     1d0:	8e 8b       	std	Y+22, r24	; 0x16
     1d2:	79 8f       	std	Y+25, r23	; 0x19
     1d4:	68 8f       	std	Y+24, r22	; 0x18
     1d6:	5b 8f       	std	Y+27, r21	; 0x1b
     1d8:	4a 8f       	std	Y+26, r20	; 0x1a

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     1da:	8e 89       	ldd	r24, Y+22	; 0x16
     1dc:	9f 89       	ldd	r25, Y+23	; 0x17
     1de:	80 56       	subi	r24, 0x60	; 96
     1e0:	9f 4f       	sbci	r25, 0xFF	; 255
     1e2:	9f 8b       	std	Y+23, r25	; 0x17
     1e4:	8e 8b       	std	Y+22, r24	; 0x16

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     1e6:	19 82       	std	Y+1, r1	; 0x01
     1e8:	1f c0       	rjmp	.+62     	; 0x228 <aes_decrypt_128+0x74>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	88 2f       	mov	r24, r24
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     1f2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     1f4:	82 0f       	add	r24, r18
     1f6:	93 1f       	adc	r25, r19
     1f8:	29 81       	ldd	r18, Y+1	; 0x01
     1fa:	22 2f       	mov	r18, r18
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	48 8d       	ldd	r20, Y+24	; 0x18
     200:	59 8d       	ldd	r21, Y+25	; 0x19
     202:	24 0f       	add	r18, r20
     204:	35 1f       	adc	r19, r21
     206:	f9 01       	movw	r30, r18
     208:	60 81       	ld	r22, Z
     20a:	29 81       	ldd	r18, Y+1	; 0x01
     20c:	22 2f       	mov	r18, r18
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	4e 89       	ldd	r20, Y+22	; 0x16
     212:	5f 89       	ldd	r21, Y+23	; 0x17
     214:	24 0f       	add	r18, r20
     216:	35 1f       	adc	r19, r21
     218:	f9 01       	movw	r30, r18
     21a:	20 81       	ld	r18, Z
     21c:	26 27       	eor	r18, r22
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	89 83       	std	Y+1, r24	; 0x01
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	80 31       	cpi	r24, 0x10	; 16
     22c:	f0 f2       	brcs	.-68     	; 0x1ea <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
     22e:	8e 89       	ldd	r24, Y+22	; 0x16
     230:	9f 89       	ldd	r25, Y+23	; 0x17
     232:	40 97       	sbiw	r24, 0x10	; 16
     234:	9f 8b       	std	Y+23, r25	; 0x17
     236:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
     238:	8a 8d       	ldd	r24, Y+26	; 0x1a
     23a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     23c:	0e 94 57 00 	call	0xae	; 0xae <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     240:	19 82       	std	Y+1, r1	; 0x01
     242:	1b c0       	rjmp	.+54     	; 0x27a <aes_decrypt_128+0xc6>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     24c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     24e:	82 0f       	add	r24, r18
     250:	93 1f       	adc	r25, r19
     252:	29 81       	ldd	r18, Y+1	; 0x01
     254:	22 2f       	mov	r18, r18
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	4a 8d       	ldd	r20, Y+26	; 0x1a
     25a:	5b 8d       	ldd	r21, Y+27	; 0x1b
     25c:	24 0f       	add	r18, r20
     25e:	35 1f       	adc	r19, r21
     260:	f9 01       	movw	r30, r18
     262:	20 81       	ld	r18, Z
     264:	22 2f       	mov	r18, r18
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	20 50       	subi	r18, 0x00	; 0
     26a:	3f 4f       	sbci	r19, 0xFF	; 255
     26c:	f9 01       	movw	r30, r18
     26e:	20 81       	ld	r18, Z
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	8f 5f       	subi	r24, 0xFF	; 255
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	10 f3       	brcs	.-60     	; 0x244 <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	8a 83       	std	Y+2, r24	; 0x02
     284:	ef c1       	rjmp	.+990    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     286:	19 82       	std	Y+1, r1	; 0x01
     288:	20 c0       	rjmp	.+64     	; 0x2ca <aes_decrypt_128+0x116>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	9e 01       	movw	r18, r28
     292:	2a 5f       	subi	r18, 0xFA	; 250
     294:	3f 4f       	sbci	r19, 0xFF	; 255
     296:	82 0f       	add	r24, r18
     298:	93 1f       	adc	r25, r19
     29a:	29 81       	ldd	r18, Y+1	; 0x01
     29c:	22 2f       	mov	r18, r18
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     2a2:	5b 8d       	ldd	r21, Y+27	; 0x1b
     2a4:	24 0f       	add	r18, r20
     2a6:	35 1f       	adc	r19, r21
     2a8:	f9 01       	movw	r30, r18
     2aa:	60 81       	ld	r22, Z
     2ac:	29 81       	ldd	r18, Y+1	; 0x01
     2ae:	22 2f       	mov	r18, r18
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	4e 89       	ldd	r20, Y+22	; 0x16
     2b4:	5f 89       	ldd	r21, Y+23	; 0x17
     2b6:	24 0f       	add	r18, r20
     2b8:	35 1f       	adc	r19, r21
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	26 27       	eor	r18, r22
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	8f 5f       	subi	r24, 0xFF	; 255
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	80 31       	cpi	r24, 0x10	; 16
     2ce:	e8 f2       	brcs	.-70     	; 0x28a <aes_decrypt_128+0xd6>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     2d0:	19 82       	std	Y+1, r1	; 0x01
     2d2:	98 c1       	rjmp	.+816    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9e 01       	movw	r18, r28
     2dc:	2a 5f       	subi	r18, 0xFA	; 250
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	82 0f       	add	r24, r18
     2e2:	93 1f       	adc	r25, r19
     2e4:	fc 01       	movw	r30, r24
     2e6:	40 81       	ld	r20, Z
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	9e 01       	movw	r18, r28
     2f2:	2a 5f       	subi	r18, 0xFA	; 250
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	48 27       	eor	r20, r24
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	02 96       	adiw	r24, 0x02	; 2
     308:	9e 01       	movw	r18, r28
     30a:	2a 5f       	subi	r18, 0xFA	; 250
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	48 27       	eor	r20, r24
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	03 96       	adiw	r24, 0x03	; 3
     320:	9e 01       	movw	r18, r28
     322:	2a 5f       	subi	r18, 0xFA	; 250
     324:	3f 4f       	sbci	r19, 0xFF	; 255
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	84 27       	eor	r24, r20
     330:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	2a 8d       	ldd	r18, Y+26	; 0x1a
     33a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     33c:	89 01       	movw	r16, r18
     33e:	08 0f       	add	r16, r24
     340:	19 1f       	adc	r17, r25
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	9e 01       	movw	r18, r28
     34a:	2a 5f       	subi	r18, 0xFA	; 250
     34c:	3f 4f       	sbci	r19, 0xFF	; 255
     34e:	82 0f       	add	r24, r18
     350:	93 1f       	adc	r25, r19
     352:	fc 01       	movw	r30, r24
     354:	90 81       	ld	r25, Z
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	f9 2e       	mov	r15, r25
     35a:	f8 26       	eor	r15, r24
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	88 2f       	mov	r24, r24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	9e 01       	movw	r18, r28
     364:	2a 5f       	subi	r18, 0xFA	; 250
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	82 0f       	add	r24, r18
     36a:	93 1f       	adc	r25, r19
     36c:	fc 01       	movw	r30, r24
     36e:	40 81       	ld	r20, Z
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	88 2f       	mov	r24, r24
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	9e 01       	movw	r18, r28
     37a:	2a 5f       	subi	r18, 0xFA	; 250
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	84 27       	eor	r24, r20
     388:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     38c:	8f 25       	eor	r24, r15
     38e:	f8 01       	movw	r30, r16
     390:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     39c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     39e:	89 01       	movw	r16, r18
     3a0:	08 0f       	add	r16, r24
     3a2:	19 1f       	adc	r17, r25
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	9e 01       	movw	r18, r28
     3ae:	2a 5f       	subi	r18, 0xFA	; 250
     3b0:	3f 4f       	sbci	r19, 0xFF	; 255
     3b2:	82 0f       	add	r24, r18
     3b4:	93 1f       	adc	r25, r19
     3b6:	fc 01       	movw	r30, r24
     3b8:	90 81       	ld	r25, Z
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	f9 2e       	mov	r15, r25
     3be:	f8 26       	eor	r15, r24
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	88 2f       	mov	r24, r24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	9e 01       	movw	r18, r28
     3ca:	2a 5f       	subi	r18, 0xFA	; 250
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	82 0f       	add	r24, r18
     3d0:	93 1f       	adc	r25, r19
     3d2:	fc 01       	movw	r30, r24
     3d4:	40 81       	ld	r20, Z
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	02 96       	adiw	r24, 0x02	; 2
     3de:	9e 01       	movw	r18, r28
     3e0:	2a 5f       	subi	r18, 0xFA	; 250
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	84 27       	eor	r24, r20
     3ee:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     3f2:	8f 25       	eor	r24, r15
     3f4:	f8 01       	movw	r30, r16
     3f6:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	02 96       	adiw	r24, 0x02	; 2
     400:	2a 8d       	ldd	r18, Y+26	; 0x1a
     402:	3b 8d       	ldd	r19, Y+27	; 0x1b
     404:	89 01       	movw	r16, r18
     406:	08 0f       	add	r16, r24
     408:	19 1f       	adc	r17, r25
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	02 96       	adiw	r24, 0x02	; 2
     412:	9e 01       	movw	r18, r28
     414:	2a 5f       	subi	r18, 0xFA	; 250
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	fc 01       	movw	r30, r24
     41e:	90 81       	ld	r25, Z
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	f9 2e       	mov	r15, r25
     424:	f8 26       	eor	r15, r24
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 96       	adiw	r24, 0x02	; 2
     42e:	9e 01       	movw	r18, r28
     430:	2a 5f       	subi	r18, 0xFA	; 250
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	fc 01       	movw	r30, r24
     43a:	40 81       	ld	r20, Z
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	03 96       	adiw	r24, 0x03	; 3
     444:	9e 01       	movw	r18, r28
     446:	2a 5f       	subi	r18, 0xFA	; 250
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	fc 01       	movw	r30, r24
     450:	80 81       	ld	r24, Z
     452:	84 27       	eor	r24, r20
     454:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     458:	8f 25       	eor	r24, r15
     45a:	f8 01       	movw	r30, r16
     45c:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	03 96       	adiw	r24, 0x03	; 3
     466:	2a 8d       	ldd	r18, Y+26	; 0x1a
     468:	3b 8d       	ldd	r19, Y+27	; 0x1b
     46a:	89 01       	movw	r16, r18
     46c:	08 0f       	add	r16, r24
     46e:	19 1f       	adc	r17, r25
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	03 96       	adiw	r24, 0x03	; 3
     478:	9e 01       	movw	r18, r28
     47a:	2a 5f       	subi	r18, 0xFA	; 250
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	fc 01       	movw	r30, r24
     484:	90 81       	ld	r25, Z
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	f9 2e       	mov	r15, r25
     48a:	f8 26       	eor	r15, r24
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	03 96       	adiw	r24, 0x03	; 3
     494:	9e 01       	movw	r18, r28
     496:	2a 5f       	subi	r18, 0xFA	; 250
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
     49e:	fc 01       	movw	r30, r24
     4a0:	40 81       	ld	r20, Z
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	88 2f       	mov	r24, r24
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9e 01       	movw	r18, r28
     4aa:	2a 5f       	subi	r18, 0xFA	; 250
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	82 0f       	add	r24, r18
     4b0:	93 1f       	adc	r25, r19
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	84 27       	eor	r24, r20
     4b8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     4bc:	8f 25       	eor	r24, r15
     4be:	f8 01       	movw	r30, r16
     4c0:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	9e 01       	movw	r18, r28
     4ca:	2a 5f       	subi	r18, 0xFA	; 250
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	fc 01       	movw	r30, r24
     4d4:	40 81       	ld	r20, Z
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 96       	adiw	r24, 0x02	; 2
     4de:	9e 01       	movw	r18, r28
     4e0:	2a 5f       	subi	r18, 0xFA	; 250
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	84 27       	eor	r24, r20
     4ee:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     4f2:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     4f6:	8c 83       	std	Y+4, r24	; 0x04
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	9e 01       	movw	r18, r28
     502:	2a 5f       	subi	r18, 0xFA	; 250
     504:	3f 4f       	sbci	r19, 0xFF	; 255
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	fc 01       	movw	r30, r24
     50c:	40 81       	ld	r20, Z
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	88 2f       	mov	r24, r24
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	03 96       	adiw	r24, 0x03	; 3
     516:	9e 01       	movw	r18, r28
     518:	2a 5f       	subi	r18, 0xFA	; 250
     51a:	3f 4f       	sbci	r19, 0xFF	; 255
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	fc 01       	movw	r30, r24
     522:	80 81       	ld	r24, Z
     524:	84 27       	eor	r24, r20
     526:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     52a:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     52e:	8d 83       	std	Y+5, r24	; 0x05
            t = mul2(u ^ v);
     530:	9c 81       	ldd	r25, Y+4	; 0x04
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	89 27       	eor	r24, r25
     536:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     53a:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   ^= t ^ u;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	2a 8d       	ldd	r18, Y+26	; 0x1a
     544:	3b 8d       	ldd	r19, Y+27	; 0x1b
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	22 2f       	mov	r18, r18
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	4a 8d       	ldd	r20, Y+26	; 0x1a
     552:	5b 8d       	ldd	r21, Y+27	; 0x1b
     554:	24 0f       	add	r18, r20
     556:	35 1f       	adc	r19, r21
     558:	f9 01       	movw	r30, r18
     55a:	30 81       	ld	r19, Z
     55c:	4b 81       	ldd	r20, Y+3	; 0x03
     55e:	2c 81       	ldd	r18, Y+4	; 0x04
     560:	24 27       	eor	r18, r20
     562:	23 27       	eor	r18, r19
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	2a 8d       	ldd	r18, Y+26	; 0x1a
     572:	3b 8d       	ldd	r19, Y+27	; 0x1b
     574:	82 0f       	add	r24, r18
     576:	93 1f       	adc	r25, r19
     578:	29 81       	ldd	r18, Y+1	; 0x01
     57a:	22 2f       	mov	r18, r18
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	4a 8d       	ldd	r20, Y+26	; 0x1a
     584:	5b 8d       	ldd	r21, Y+27	; 0x1b
     586:	24 0f       	add	r18, r20
     588:	35 1f       	adc	r19, r21
     58a:	f9 01       	movw	r30, r18
     58c:	30 81       	ld	r19, Z
     58e:	4b 81       	ldd	r20, Y+3	; 0x03
     590:	2d 81       	ldd	r18, Y+5	; 0x05
     592:	24 27       	eor	r18, r20
     594:	23 27       	eor	r18, r19
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	02 96       	adiw	r24, 0x02	; 2
     5a2:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5a4:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	29 81       	ldd	r18, Y+1	; 0x01
     5ac:	22 2f       	mov	r18, r18
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	2e 5f       	subi	r18, 0xFE	; 254
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5b6:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5b8:	24 0f       	add	r18, r20
     5ba:	35 1f       	adc	r19, r21
     5bc:	f9 01       	movw	r30, r18
     5be:	30 81       	ld	r19, Z
     5c0:	4b 81       	ldd	r20, Y+3	; 0x03
     5c2:	2c 81       	ldd	r18, Y+4	; 0x04
     5c4:	24 27       	eor	r18, r20
     5c6:	23 27       	eor	r18, r19
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	88 2f       	mov	r24, r24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	03 96       	adiw	r24, 0x03	; 3
     5d4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5d6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	22 2f       	mov	r18, r18
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	2d 5f       	subi	r18, 0xFD	; 253
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5e8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5ea:	24 0f       	add	r18, r20
     5ec:	35 1f       	adc	r19, r21
     5ee:	f9 01       	movw	r30, r18
     5f0:	30 81       	ld	r19, Z
     5f2:	4b 81       	ldd	r20, Y+3	; 0x03
     5f4:	2d 81       	ldd	r18, Y+5	; 0x05
     5f6:	24 27       	eor	r18, r20
     5f8:	23 27       	eor	r18, r19
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	8c 5f       	subi	r24, 0xFC	; 252
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	80 31       	cpi	r24, 0x10	; 16
     608:	08 f4       	brcc	.+2      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     60a:	64 ce       	rjmp	.-824    	; 0x2d4 <aes_decrypt_128+0x120>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     60c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     60e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     610:	0e 94 57 00 	call	0xae	; 0xae <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	1b c0       	rjmp	.+54     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     620:	3b 8d       	ldd	r19, Y+27	; 0x1b
     622:	82 0f       	add	r24, r18
     624:	93 1f       	adc	r25, r19
     626:	29 81       	ldd	r18, Y+1	; 0x01
     628:	22 2f       	mov	r18, r18
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     62e:	5b 8d       	ldd	r21, Y+27	; 0x1b
     630:	24 0f       	add	r18, r20
     632:	35 1f       	adc	r19, r21
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	22 2f       	mov	r18, r18
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	20 50       	subi	r18, 0x00	; 0
     63e:	3f 4f       	sbci	r19, 0xFF	; 255
     640:	f9 01       	movw	r30, r18
     642:	20 81       	ld	r18, Z
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	80 31       	cpi	r24, 0x10	; 16
     652:	10 f3       	brcs	.-60     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
     654:	8e 89       	ldd	r24, Y+22	; 0x16
     656:	9f 89       	ldd	r25, Y+23	; 0x17
     658:	40 97       	sbiw	r24, 0x10	; 16
     65a:	9f 8b       	std	Y+23, r25	; 0x17
     65c:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	8a 30       	cpi	r24, 0x0A	; 10
     668:	08 f4       	brcc	.+2      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     66a:	0d ce       	rjmp	.-998    	; 0x286 <aes_decrypt_128+0xd2>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     66c:	19 82       	std	Y+1, r1	; 0x01
     66e:	1f c0       	rjmp	.+62     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
        *(plaintext+i) ^= *(roundkeys+i);
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2a 8d       	ldd	r18, Y+26	; 0x1a
     678:	3b 8d       	ldd	r19, Y+27	; 0x1b
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	29 81       	ldd	r18, Y+1	; 0x01
     680:	22 2f       	mov	r18, r18
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	4a 8d       	ldd	r20, Y+26	; 0x1a
     686:	5b 8d       	ldd	r21, Y+27	; 0x1b
     688:	24 0f       	add	r18, r20
     68a:	35 1f       	adc	r19, r21
     68c:	f9 01       	movw	r30, r18
     68e:	60 81       	ld	r22, Z
     690:	29 81       	ldd	r18, Y+1	; 0x01
     692:	22 2f       	mov	r18, r18
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4e 89       	ldd	r20, Y+22	; 0x16
     698:	5f 89       	ldd	r21, Y+23	; 0x17
     69a:	24 0f       	add	r18, r20
     69c:	35 1f       	adc	r19, r21
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	26 27       	eor	r18, r22
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	80 31       	cpi	r24, 0x10	; 16
     6b2:	f0 f2       	brcs	.-68     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
        *(plaintext+i) ^= *(roundkeys+i);
    }

     6b4:	00 00       	nop
     6b6:	6b 96       	adiw	r28, 0x1b	; 27
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	08 95       	ret

000006ce <mul2>:
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
static inline uint8_t mul2(uint8_t a) {
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	1f 92       	push	r1
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	89 83       	std	Y+1, r24	; 0x01
    return (a<<1);
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	88 0f       	add	r24, r24
}
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <shift_rows+0x6>
     6ec:	1f 92       	push	r1
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	9b 81       	ldd	r25, Y+3	; 0x03
     6fa:	fc 01       	movw	r30, r24
     6fc:	81 81       	ldd	r24, Z+1	; 0x01
     6fe:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	9b 81       	ldd	r25, Y+3	; 0x03
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	2a 81       	ldd	r18, Y+2	; 0x02
     708:	3b 81       	ldd	r19, Y+3	; 0x03
     70a:	f9 01       	movw	r30, r18
     70c:	25 81       	ldd	r18, Z+5	; 0x05
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	9b 81       	ldd	r25, Y+3	; 0x03
     716:	05 96       	adiw	r24, 0x05	; 5
     718:	2a 81       	ldd	r18, Y+2	; 0x02
     71a:	3b 81       	ldd	r19, Y+3	; 0x03
     71c:	f9 01       	movw	r30, r18
     71e:	21 85       	ldd	r18, Z+9	; 0x09
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	9b 81       	ldd	r25, Y+3	; 0x03
     728:	09 96       	adiw	r24, 0x09	; 9
     72a:	2a 81       	ldd	r18, Y+2	; 0x02
     72c:	3b 81       	ldd	r19, Y+3	; 0x03
     72e:	f9 01       	movw	r30, r18
     730:	25 85       	ldd	r18, Z+13	; 0x0d
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
    *(state+13) = temp;
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	0d 96       	adiw	r24, 0x0d	; 13
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	fc 01       	movw	r30, r24
     748:	82 81       	ldd	r24, Z+2	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	9b 81       	ldd	r25, Y+3	; 0x03
     750:	02 96       	adiw	r24, 0x02	; 2
     752:	2a 81       	ldd	r18, Y+2	; 0x02
     754:	3b 81       	ldd	r19, Y+3	; 0x03
     756:	f9 01       	movw	r30, r18
     758:	22 85       	ldd	r18, Z+10	; 0x0a
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
    *(state+10) = temp;
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	9b 81       	ldd	r25, Y+3	; 0x03
     762:	0a 96       	adiw	r24, 0x0a	; 10
     764:	29 81       	ldd	r18, Y+1	; 0x01
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
    temp        = *(state+6);
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	9b 81       	ldd	r25, Y+3	; 0x03
     76e:	fc 01       	movw	r30, r24
     770:	86 81       	ldd	r24, Z+6	; 0x06
     772:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	9b 81       	ldd	r25, Y+3	; 0x03
     778:	06 96       	adiw	r24, 0x06	; 6
     77a:	2a 81       	ldd	r18, Y+2	; 0x02
     77c:	3b 81       	ldd	r19, Y+3	; 0x03
     77e:	f9 01       	movw	r30, r18
     780:	26 85       	ldd	r18, Z+14	; 0x0e
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
    *(state+14) = temp;
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	9b 81       	ldd	r25, Y+3	; 0x03
     78a:	0e 96       	adiw	r24, 0x0e	; 14
     78c:	29 81       	ldd	r18, Y+1	; 0x01
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     792:	8a 81       	ldd	r24, Y+2	; 0x02
     794:	9b 81       	ldd	r25, Y+3	; 0x03
     796:	fc 01       	movw	r30, r24
     798:	87 85       	ldd	r24, Z+15	; 0x0f
     79a:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	9b 81       	ldd	r25, Y+3	; 0x03
     7a0:	0f 96       	adiw	r24, 0x0f	; 15
     7a2:	2a 81       	ldd	r18, Y+2	; 0x02
     7a4:	3b 81       	ldd	r19, Y+3	; 0x03
     7a6:	f9 01       	movw	r30, r18
     7a8:	23 85       	ldd	r18, Z+11	; 0x0b
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	0b 96       	adiw	r24, 0x0b	; 11
     7b4:	2a 81       	ldd	r18, Y+2	; 0x02
     7b6:	3b 81       	ldd	r19, Y+3	; 0x03
     7b8:	f9 01       	movw	r30, r18
     7ba:	27 81       	ldd	r18, Z+7	; 0x07
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	9b 81       	ldd	r25, Y+3	; 0x03
     7c4:	07 96       	adiw	r24, 0x07	; 7
     7c6:	2a 81       	ldd	r18, Y+2	; 0x02
     7c8:	3b 81       	ldd	r19, Y+3	; 0x03
     7ca:	f9 01       	movw	r30, r18
     7cc:	23 81       	ldd	r18, Z+3	; 0x03
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
    *(state+3)  = temp;
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	9b 81       	ldd	r25, Y+3	; 0x03
     7d6:	03 96       	adiw	r24, 0x03	; 3
     7d8:	29 81       	ldd	r18, Y+1	; 0x01
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
}
     7de:	00 00       	nop
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <aes_encrypt_128>:

void aes_encrypt_128(const uint8_t *roundkeys, const uint8_t *plaintext, uint8_t *ciphertext) {
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	69 97       	sbiw	r28, 0x19	; 25
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	9d 8b       	std	Y+21, r25	; 0x15
     806:	8c 8b       	std	Y+20, r24	; 0x14
     808:	7f 8b       	std	Y+23, r23	; 0x17
     80a:	6e 8b       	std	Y+22, r22	; 0x16
     80c:	59 8f       	std	Y+25, r21	; 0x19
     80e:	48 8f       	std	Y+24, r20	; 0x18

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     810:	19 82       	std	Y+1, r1	; 0x01
     812:	1f c0       	rjmp	.+62     	; 0x852 <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	88 2f       	mov	r24, r24
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	28 8d       	ldd	r18, Y+24	; 0x18
     81c:	39 8d       	ldd	r19, Y+25	; 0x19
     81e:	28 0f       	add	r18, r24
     820:	39 1f       	adc	r19, r25
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	4e 89       	ldd	r20, Y+22	; 0x16
     82a:	5f 89       	ldd	r21, Y+23	; 0x17
     82c:	84 0f       	add	r24, r20
     82e:	95 1f       	adc	r25, r21
     830:	fc 01       	movw	r30, r24
     832:	60 81       	ld	r22, Z
     834:	8c 89       	ldd	r24, Y+20	; 0x14
     836:	9d 89       	ldd	r25, Y+21	; 0x15
     838:	ac 01       	movw	r20, r24
     83a:	4f 5f       	subi	r20, 0xFF	; 255
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	5d 8b       	std	Y+21, r21	; 0x15
     840:	4c 8b       	std	Y+20, r20	; 0x14
     842:	fc 01       	movw	r30, r24
     844:	80 81       	ld	r24, Z
     846:	86 27       	eor	r24, r22
     848:	f9 01       	movw	r30, r18
     84a:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	80 31       	cpi	r24, 0x10	; 16
     856:	f0 f2       	brcs	.-68     	; 0x814 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	50 c1       	rjmp	.+672    	; 0xafe <__stack+0x1ff>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     85e:	19 82       	std	Y+1, r1	; 0x01
     860:	1c c0       	rjmp	.+56     	; 0x89a <aes_encrypt_128+0xae>
            *(tmp+i) = SBOX[*(ciphertext+i)];
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9e 01       	movw	r18, r28
     86a:	2c 5f       	subi	r18, 0xFC	; 252
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	82 0f       	add	r24, r18
     870:	93 1f       	adc	r25, r19
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	22 2f       	mov	r18, r18
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	48 8d       	ldd	r20, Y+24	; 0x18
     87a:	59 8d       	ldd	r21, Y+25	; 0x19
     87c:	24 0f       	add	r18, r20
     87e:	35 1f       	adc	r19, r21
     880:	f9 01       	movw	r30, r18
     882:	20 81       	ld	r18, Z
     884:	22 2f       	mov	r18, r18
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	20 50       	subi	r18, 0x00	; 0
     88a:	3e 4f       	sbci	r19, 0xFE	; 254
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	80 31       	cpi	r24, 0x10	; 16
     89e:	08 f3       	brcs	.-62     	; 0x862 <aes_encrypt_128+0x76>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
     8a0:	ce 01       	movw	r24, r28
     8a2:	04 96       	adiw	r24, 0x04	; 4
     8a4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
     8a8:	19 82       	std	Y+1, r1	; 0x01
     8aa:	fe c0       	rjmp	.+508    	; 0xaa8 <__stack+0x1a9>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	88 2f       	mov	r24, r24
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	9e 01       	movw	r18, r28
     8b4:	2c 5f       	subi	r18, 0xFC	; 252
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	fc 01       	movw	r30, r24
     8be:	40 81       	ld	r20, Z
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	9e 01       	movw	r18, r28
     8ca:	2c 5f       	subi	r18, 0xFC	; 252
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	48 27       	eor	r20, r24
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	02 96       	adiw	r24, 0x02	; 2
     8e0:	9e 01       	movw	r18, r28
     8e2:	2c 5f       	subi	r18, 0xFC	; 252
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	fc 01       	movw	r30, r24
     8ec:	80 81       	ld	r24, Z
     8ee:	48 27       	eor	r20, r24
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	03 96       	adiw	r24, 0x03	; 3
     8f8:	9e 01       	movw	r18, r28
     8fa:	2c 5f       	subi	r18, 0xFC	; 252
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	84 27       	eor	r24, r20
     908:	8b 83       	std	Y+3, r24	; 0x03
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	28 8d       	ldd	r18, Y+24	; 0x18
     912:	39 8d       	ldd	r19, Y+25	; 0x19
     914:	89 01       	movw	r16, r18
     916:	08 0f       	add	r16, r24
     918:	19 1f       	adc	r17, r25
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9e 01       	movw	r18, r28
     922:	2c 5f       	subi	r18, 0xFC	; 252
     924:	3f 4f       	sbci	r19, 0xFF	; 255
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	fc 01       	movw	r30, r24
     92c:	40 81       	ld	r20, Z
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	9e 01       	movw	r18, r28
     938:	2c 5f       	subi	r18, 0xFC	; 252
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	82 0f       	add	r24, r18
     93e:	93 1f       	adc	r25, r19
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	84 27       	eor	r24, r20
     946:	0e 94 67 03 	call	0x6ce	; 0x6ce <mul2>
     94a:	48 2f       	mov	r20, r24
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	9e 01       	movw	r18, r28
     954:	2c 5f       	subi	r18, 0xFC	; 252
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	82 0f       	add	r24, r18
     95a:	93 1f       	adc	r25, r19
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	94 2f       	mov	r25, r20
     962:	98 27       	eor	r25, r24
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	89 27       	eor	r24, r25
     968:	f8 01       	movw	r30, r16
     96a:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	28 8d       	ldd	r18, Y+24	; 0x18
     976:	39 8d       	ldd	r19, Y+25	; 0x19
     978:	89 01       	movw	r16, r18
     97a:	08 0f       	add	r16, r24
     97c:	19 1f       	adc	r17, r25
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	9e 01       	movw	r18, r28
     988:	2c 5f       	subi	r18, 0xFC	; 252
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	fc 01       	movw	r30, r24
     992:	40 81       	ld	r20, Z
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	02 96       	adiw	r24, 0x02	; 2
     99c:	9e 01       	movw	r18, r28
     99e:	2c 5f       	subi	r18, 0xFC	; 252
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	fc 01       	movw	r30, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	84 27       	eor	r24, r20
     9ac:	0e 94 67 03 	call	0x6ce	; 0x6ce <mul2>
     9b0:	48 2f       	mov	r20, r24
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	9e 01       	movw	r18, r28
     9bc:	2c 5f       	subi	r18, 0xFC	; 252
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	82 0f       	add	r24, r18
     9c2:	93 1f       	adc	r25, r19
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
     9c8:	94 2f       	mov	r25, r20
     9ca:	98 27       	eor	r25, r24
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	89 27       	eor	r24, r25
     9d0:	f8 01       	movw	r30, r16
     9d2:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	88 2f       	mov	r24, r24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 96       	adiw	r24, 0x02	; 2
     9dc:	28 8d       	ldd	r18, Y+24	; 0x18
     9de:	39 8d       	ldd	r19, Y+25	; 0x19
     9e0:	89 01       	movw	r16, r18
     9e2:	08 0f       	add	r16, r24
     9e4:	19 1f       	adc	r17, r25
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	02 96       	adiw	r24, 0x02	; 2
     9ee:	9e 01       	movw	r18, r28
     9f0:	2c 5f       	subi	r18, 0xFC	; 252
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	82 0f       	add	r24, r18
     9f6:	93 1f       	adc	r25, r19
     9f8:	fc 01       	movw	r30, r24
     9fa:	40 81       	ld	r20, Z
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	03 96       	adiw	r24, 0x03	; 3
     a04:	9e 01       	movw	r18, r28
     a06:	2c 5f       	subi	r18, 0xFC	; 252
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	82 0f       	add	r24, r18
     a0c:	93 1f       	adc	r25, r19
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	84 27       	eor	r24, r20
     a14:	0e 94 67 03 	call	0x6ce	; 0x6ce <mul2>
     a18:	48 2f       	mov	r20, r24
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	02 96       	adiw	r24, 0x02	; 2
     a22:	9e 01       	movw	r18, r28
     a24:	2c 5f       	subi	r18, 0xFC	; 252
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	82 0f       	add	r24, r18
     a2a:	93 1f       	adc	r25, r19
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	94 2f       	mov	r25, r20
     a32:	98 27       	eor	r25, r24
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	89 27       	eor	r24, r25
     a38:	f8 01       	movw	r30, r16
     a3a:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	88 2f       	mov	r24, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	03 96       	adiw	r24, 0x03	; 3
     a44:	28 8d       	ldd	r18, Y+24	; 0x18
     a46:	39 8d       	ldd	r19, Y+25	; 0x19
     a48:	89 01       	movw	r16, r18
     a4a:	08 0f       	add	r16, r24
     a4c:	19 1f       	adc	r17, r25
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	03 96       	adiw	r24, 0x03	; 3
     a56:	9e 01       	movw	r18, r28
     a58:	2c 5f       	subi	r18, 0xFC	; 252
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	82 0f       	add	r24, r18
     a5e:	93 1f       	adc	r25, r19
     a60:	fc 01       	movw	r30, r24
     a62:	40 81       	ld	r20, Z
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 01       	movw	r18, r28
     a6c:	2c 5f       	subi	r18, 0xFC	; 252
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
     a78:	84 27       	eor	r24, r20
     a7a:	0e 94 67 03 	call	0x6ce	; 0x6ce <mul2>
     a7e:	48 2f       	mov	r20, r24
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	03 96       	adiw	r24, 0x03	; 3
     a88:	9e 01       	movw	r18, r28
     a8a:	2c 5f       	subi	r18, 0xFC	; 252
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	94 2f       	mov	r25, r20
     a98:	98 27       	eor	r25, r24
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	89 27       	eor	r24, r25
     a9e:	f8 01       	movw	r30, r16
     aa0:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	8c 5f       	subi	r24, 0xFC	; 252
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	80 31       	cpi	r24, 0x10	; 16
     aac:	08 f4       	brcc	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	fe ce       	rjmp	.-516    	; 0x8ac <aes_encrypt_128+0xc0>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     ab0:	19 82       	std	Y+1, r1	; 0x01
     ab2:	1f c0       	rjmp	.+62     	; 0xaf2 <__stack+0x1f3>
            *(ciphertext+i) ^= *roundkeys++;
     ab4:	8c 89       	ldd	r24, Y+20	; 0x14
     ab6:	9d 89       	ldd	r25, Y+21	; 0x15
     ab8:	9c 01       	movw	r18, r24
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	3d 8b       	std	Y+21, r19	; 0x15
     ac0:	2c 8b       	std	Y+20, r18	; 0x14
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	28 8d       	ldd	r18, Y+24	; 0x18
     ace:	39 8d       	ldd	r19, Y+25	; 0x19
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	29 81       	ldd	r18, Y+1	; 0x01
     ad6:	22 2f       	mov	r18, r18
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	48 8d       	ldd	r20, Y+24	; 0x18
     adc:	59 8d       	ldd	r21, Y+25	; 0x19
     ade:	24 0f       	add	r18, r20
     ae0:	35 1f       	adc	r19, r21
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	26 27       	eor	r18, r22
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	80 31       	cpi	r24, 0x10	; 16
     af6:	f0 f2       	brcs	.-68     	; 0xab4 <__stack+0x1b5>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	8a 83       	std	Y+2, r24	; 0x02
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	8a 30       	cpi	r24, 0x0A	; 10
     b02:	08 f4       	brcc	.+2      	; 0xb06 <__stack+0x207>
     b04:	ac ce       	rjmp	.-680    	; 0x85e <aes_encrypt_128+0x72>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b06:	19 82       	std	Y+1, r1	; 0x01
     b08:	1b c0       	rjmp	.+54     	; 0xb40 <__stack+0x241>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	28 8d       	ldd	r18, Y+24	; 0x18
     b12:	39 8d       	ldd	r19, Y+25	; 0x19
     b14:	82 0f       	add	r24, r18
     b16:	93 1f       	adc	r25, r19
     b18:	29 81       	ldd	r18, Y+1	; 0x01
     b1a:	22 2f       	mov	r18, r18
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	48 8d       	ldd	r20, Y+24	; 0x18
     b20:	59 8d       	ldd	r21, Y+25	; 0x19
     b22:	24 0f       	add	r18, r20
     b24:	35 1f       	adc	r19, r21
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	22 2f       	mov	r18, r18
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	20 50       	subi	r18, 0x00	; 0
     b30:	3e 4f       	sbci	r19, 0xFE	; 254
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	80 31       	cpi	r24, 0x10	; 16
     b44:	10 f3       	brcs	.-60     	; 0xb0a <__stack+0x20b>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
     b46:	88 8d       	ldd	r24, Y+24	; 0x18
     b48:	99 8d       	ldd	r25, Y+25	; 0x19
     b4a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	1f c0       	rjmp	.+62     	; 0xb90 <__stack+0x291>
        *(ciphertext+i) ^= *roundkeys++;
     b52:	8c 89       	ldd	r24, Y+20	; 0x14
     b54:	9d 89       	ldd	r25, Y+21	; 0x15
     b56:	9c 01       	movw	r18, r24
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	3d 8b       	std	Y+21, r19	; 0x15
     b5e:	2c 8b       	std	Y+20, r18	; 0x14
     b60:	fc 01       	movw	r30, r24
     b62:	60 81       	ld	r22, Z
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	28 8d       	ldd	r18, Y+24	; 0x18
     b6c:	39 8d       	ldd	r19, Y+25	; 0x19
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	29 81       	ldd	r18, Y+1	; 0x01
     b74:	22 2f       	mov	r18, r18
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	48 8d       	ldd	r20, Y+24	; 0x18
     b7a:	59 8d       	ldd	r21, Y+25	; 0x19
     b7c:	24 0f       	add	r18, r20
     b7e:	35 1f       	adc	r19, r21
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	26 27       	eor	r18, r22
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	8f 5f       	subi	r24, 0xFF	; 255
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 31       	cpi	r24, 0x10	; 16
     b94:	f0 f2       	brcs	.-68     	; 0xb52 <__stack+0x253>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
     b96:	00 00       	nop
     b98:	69 96       	adiw	r28, 0x19	; 25
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
static uint8_t RC[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128(uint8_t *roundkeys) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	2b 97       	sbiw	r28, 0x0b	; 11
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	9b 87       	std	Y+11, r25	; 0x0b
     bc4:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t *lastround;
    uint8_t i;

  

    last4bytes = roundkeys-4;
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	04 97       	sbiw	r24, 0x04	; 4
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
     bd0:	1b 82       	std	Y+3, r1	; 0x03
     bd2:	f2 c1       	rjmp	.+996    	; 0xfb8 <aes_key_schedule_128+0x40a>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	9c 01       	movw	r18, r24
     bda:	2f 5f       	subi	r18, 0xFF	; 255
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	3a 83       	std	Y+2, r19	; 0x02
     be0:	29 83       	std	Y+1, r18	; 0x01
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 50       	subi	r24, 0x00	; 0
     bec:	9e 4f       	sbci	r25, 0xFE	; 254
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	89 87       	std	Y+9, r24	; 0x09
        temp[0] = SBOX[*last4bytes++];
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	9c 01       	movw	r18, r24
     bfa:	2f 5f       	subi	r18, 0xFF	; 255
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	3a 83       	std	Y+2, r19	; 0x02
     c00:	29 83       	std	Y+1, r18	; 0x01
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	80 50       	subi	r24, 0x00	; 0
     c0c:	9e 4f       	sbci	r25, 0xFE	; 254
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	8e 83       	std	Y+6, r24	; 0x06
        temp[1] = SBOX[*last4bytes++];
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	9c 01       	movw	r18, r24
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	3a 83       	std	Y+2, r19	; 0x02
     c20:	29 83       	std	Y+1, r18	; 0x01
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	80 50       	subi	r24, 0x00	; 0
     c2c:	9e 4f       	sbci	r25, 0xFE	; 254
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	8f 83       	std	Y+7, r24	; 0x07
        temp[2] = SBOX[*last4bytes++];
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	9c 01       	movw	r18, r24
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	3a 83       	std	Y+2, r19	; 0x02
     c40:	29 83       	std	Y+1, r18	; 0x01
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	80 50       	subi	r24, 0x00	; 0
     c4c:	9e 4f       	sbci	r25, 0xFE	; 254
     c4e:	fc 01       	movw	r30, r24
     c50:	80 81       	ld	r24, Z
     c52:	88 87       	std	Y+8, r24	; 0x08
        temp[0] ^= RC[i];
     c54:	2e 81       	ldd	r18, Y+6	; 0x06
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	80 50       	subi	r24, 0x00	; 0
     c5e:	9d 4f       	sbci	r25, 0xFD	; 253
     c60:	fc 01       	movw	r30, r24
     c62:	80 81       	ld	r24, Z
     c64:	82 27       	eor	r24, r18
     c66:	8e 83       	std	Y+6, r24	; 0x06
        lastround = roundkeys-16;
     c68:	8a 85       	ldd	r24, Y+10	; 0x0a
     c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c6c:	40 97       	sbiw	r24, 0x10	; 16
     c6e:	9d 83       	std	Y+5, r25	; 0x05
     c70:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[0] ^ *lastround++;
     c72:	8a 85       	ldd	r24, Y+10	; 0x0a
     c74:	9b 85       	ldd	r25, Y+11	; 0x0b
     c76:	9c 01       	movw	r18, r24
     c78:	2f 5f       	subi	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	3b 87       	std	Y+11, r19	; 0x0b
     c7e:	2a 87       	std	Y+10, r18	; 0x0a
     c80:	6e 81       	ldd	r22, Y+6	; 0x06
     c82:	2c 81       	ldd	r18, Y+4	; 0x04
     c84:	3d 81       	ldd	r19, Y+5	; 0x05
     c86:	a9 01       	movw	r20, r18
     c88:	4f 5f       	subi	r20, 0xFF	; 255
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	5d 83       	std	Y+5, r21	; 0x05
     c8e:	4c 83       	std	Y+4, r20	; 0x04
     c90:	f9 01       	movw	r30, r18
     c92:	20 81       	ld	r18, Z
     c94:	26 27       	eor	r18, r22
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
        *roundkeys++ = temp[1] ^ *lastround++;
     c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c9e:	9c 01       	movw	r18, r24
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	3b 87       	std	Y+11, r19	; 0x0b
     ca6:	2a 87       	std	Y+10, r18	; 0x0a
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	a9 01       	movw	r20, r18
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	5d 83       	std	Y+5, r21	; 0x05
     cb6:	4c 83       	std	Y+4, r20	; 0x04
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	26 27       	eor	r18, r22
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
        *roundkeys++ = temp[2] ^ *lastround++;
     cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc6:	9c 01       	movw	r18, r24
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	3b 87       	std	Y+11, r19	; 0x0b
     cce:	2a 87       	std	Y+10, r18	; 0x0a
     cd0:	68 85       	ldd	r22, Y+8	; 0x08
     cd2:	2c 81       	ldd	r18, Y+4	; 0x04
     cd4:	3d 81       	ldd	r19, Y+5	; 0x05
     cd6:	a9 01       	movw	r20, r18
     cd8:	4f 5f       	subi	r20, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	5d 83       	std	Y+5, r21	; 0x05
     cde:	4c 83       	std	Y+4, r20	; 0x04
     ce0:	f9 01       	movw	r30, r18
     ce2:	20 81       	ld	r18, Z
     ce4:	26 27       	eor	r18, r22
     ce6:	fc 01       	movw	r30, r24
     ce8:	20 83       	st	Z, r18
        *roundkeys++ = temp[3] ^ *lastround++;
     cea:	8a 85       	ldd	r24, Y+10	; 0x0a
     cec:	9b 85       	ldd	r25, Y+11	; 0x0b
     cee:	9c 01       	movw	r18, r24
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	3b 87       	std	Y+11, r19	; 0x0b
     cf6:	2a 87       	std	Y+10, r18	; 0x0a
     cf8:	69 85       	ldd	r22, Y+9	; 0x09
     cfa:	2c 81       	ldd	r18, Y+4	; 0x04
     cfc:	3d 81       	ldd	r19, Y+5	; 0x05
     cfe:	a9 01       	movw	r20, r18
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	5d 83       	std	Y+5, r21	; 0x05
     d06:	4c 83       	std	Y+4, r20	; 0x04
     d08:	f9 01       	movw	r30, r18
     d0a:	20 81       	ld	r18, Z
     d0c:	26 27       	eor	r18, r22
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     d12:	8a 85       	ldd	r24, Y+10	; 0x0a
     d14:	9b 85       	ldd	r25, Y+11	; 0x0b
     d16:	9c 01       	movw	r18, r24
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	3b 87       	std	Y+11, r19	; 0x0b
     d1e:	2a 87       	std	Y+10, r18	; 0x0a
     d20:	29 81       	ldd	r18, Y+1	; 0x01
     d22:	3a 81       	ldd	r19, Y+2	; 0x02
     d24:	a9 01       	movw	r20, r18
     d26:	4f 5f       	subi	r20, 0xFF	; 255
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	5a 83       	std	Y+2, r21	; 0x02
     d2c:	49 83       	std	Y+1, r20	; 0x01
     d2e:	f9 01       	movw	r30, r18
     d30:	60 81       	ld	r22, Z
     d32:	2c 81       	ldd	r18, Y+4	; 0x04
     d34:	3d 81       	ldd	r19, Y+5	; 0x05
     d36:	a9 01       	movw	r20, r18
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	5d 83       	std	Y+5, r21	; 0x05
     d3e:	4c 83       	std	Y+4, r20	; 0x04
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	26 27       	eor	r18, r22
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4e:	9c 01       	movw	r18, r24
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	3b 87       	std	Y+11, r19	; 0x0b
     d56:	2a 87       	std	Y+10, r18	; 0x0a
     d58:	29 81       	ldd	r18, Y+1	; 0x01
     d5a:	3a 81       	ldd	r19, Y+2	; 0x02
     d5c:	a9 01       	movw	r20, r18
     d5e:	4f 5f       	subi	r20, 0xFF	; 255
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	5a 83       	std	Y+2, r21	; 0x02
     d64:	49 83       	std	Y+1, r20	; 0x01
     d66:	f9 01       	movw	r30, r18
     d68:	60 81       	ld	r22, Z
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	a9 01       	movw	r20, r18
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	5d 83       	std	Y+5, r21	; 0x05
     d76:	4c 83       	std	Y+4, r20	; 0x04
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	26 27       	eor	r18, r22
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     d82:	8a 85       	ldd	r24, Y+10	; 0x0a
     d84:	9b 85       	ldd	r25, Y+11	; 0x0b
     d86:	9c 01       	movw	r18, r24
     d88:	2f 5f       	subi	r18, 0xFF	; 255
     d8a:	3f 4f       	sbci	r19, 0xFF	; 255
     d8c:	3b 87       	std	Y+11, r19	; 0x0b
     d8e:	2a 87       	std	Y+10, r18	; 0x0a
     d90:	29 81       	ldd	r18, Y+1	; 0x01
     d92:	3a 81       	ldd	r19, Y+2	; 0x02
     d94:	a9 01       	movw	r20, r18
     d96:	4f 5f       	subi	r20, 0xFF	; 255
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	5a 83       	std	Y+2, r21	; 0x02
     d9c:	49 83       	std	Y+1, r20	; 0x01
     d9e:	f9 01       	movw	r30, r18
     da0:	60 81       	ld	r22, Z
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	a9 01       	movw	r20, r18
     da8:	4f 5f       	subi	r20, 0xFF	; 255
     daa:	5f 4f       	sbci	r21, 0xFF	; 255
     dac:	5d 83       	std	Y+5, r21	; 0x05
     dae:	4c 83       	std	Y+4, r20	; 0x04
     db0:	f9 01       	movw	r30, r18
     db2:	20 81       	ld	r18, Z
     db4:	26 27       	eor	r18, r22
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     dba:	8a 85       	ldd	r24, Y+10	; 0x0a
     dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dbe:	9c 01       	movw	r18, r24
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	3b 87       	std	Y+11, r19	; 0x0b
     dc6:	2a 87       	std	Y+10, r18	; 0x0a
     dc8:	29 81       	ldd	r18, Y+1	; 0x01
     dca:	3a 81       	ldd	r19, Y+2	; 0x02
     dcc:	a9 01       	movw	r20, r18
     dce:	4f 5f       	subi	r20, 0xFF	; 255
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	5a 83       	std	Y+2, r21	; 0x02
     dd4:	49 83       	std	Y+1, r20	; 0x01
     dd6:	f9 01       	movw	r30, r18
     dd8:	60 81       	ld	r22, Z
     dda:	2c 81       	ldd	r18, Y+4	; 0x04
     ddc:	3d 81       	ldd	r19, Y+5	; 0x05
     dde:	a9 01       	movw	r20, r18
     de0:	4f 5f       	subi	r20, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	5d 83       	std	Y+5, r21	; 0x05
     de6:	4c 83       	std	Y+4, r20	; 0x04
     de8:	f9 01       	movw	r30, r18
     dea:	20 81       	ld	r18, Z
     dec:	26 27       	eor	r18, r22
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     df2:	8a 85       	ldd	r24, Y+10	; 0x0a
     df4:	9b 85       	ldd	r25, Y+11	; 0x0b
     df6:	9c 01       	movw	r18, r24
     df8:	2f 5f       	subi	r18, 0xFF	; 255
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	3b 87       	std	Y+11, r19	; 0x0b
     dfe:	2a 87       	std	Y+10, r18	; 0x0a
     e00:	29 81       	ldd	r18, Y+1	; 0x01
     e02:	3a 81       	ldd	r19, Y+2	; 0x02
     e04:	a9 01       	movw	r20, r18
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	5a 83       	std	Y+2, r21	; 0x02
     e0c:	49 83       	std	Y+1, r20	; 0x01
     e0e:	f9 01       	movw	r30, r18
     e10:	60 81       	ld	r22, Z
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	a9 01       	movw	r20, r18
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	5d 83       	std	Y+5, r21	; 0x05
     e1e:	4c 83       	std	Y+4, r20	; 0x04
     e20:	f9 01       	movw	r30, r18
     e22:	20 81       	ld	r18, Z
     e24:	26 27       	eor	r18, r22
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2e:	9c 01       	movw	r18, r24
     e30:	2f 5f       	subi	r18, 0xFF	; 255
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	3b 87       	std	Y+11, r19	; 0x0b
     e36:	2a 87       	std	Y+10, r18	; 0x0a
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	3a 81       	ldd	r19, Y+2	; 0x02
     e3c:	a9 01       	movw	r20, r18
     e3e:	4f 5f       	subi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	5a 83       	std	Y+2, r21	; 0x02
     e44:	49 83       	std	Y+1, r20	; 0x01
     e46:	f9 01       	movw	r30, r18
     e48:	60 81       	ld	r22, Z
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	a9 01       	movw	r20, r18
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	5d 83       	std	Y+5, r21	; 0x05
     e56:	4c 83       	std	Y+4, r20	; 0x04
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	26 27       	eor	r18, r22
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e62:	8a 85       	ldd	r24, Y+10	; 0x0a
     e64:	9b 85       	ldd	r25, Y+11	; 0x0b
     e66:	9c 01       	movw	r18, r24
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	3b 87       	std	Y+11, r19	; 0x0b
     e6e:	2a 87       	std	Y+10, r18	; 0x0a
     e70:	29 81       	ldd	r18, Y+1	; 0x01
     e72:	3a 81       	ldd	r19, Y+2	; 0x02
     e74:	a9 01       	movw	r20, r18
     e76:	4f 5f       	subi	r20, 0xFF	; 255
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	5a 83       	std	Y+2, r21	; 0x02
     e7c:	49 83       	std	Y+1, r20	; 0x01
     e7e:	f9 01       	movw	r30, r18
     e80:	60 81       	ld	r22, Z
     e82:	2c 81       	ldd	r18, Y+4	; 0x04
     e84:	3d 81       	ldd	r19, Y+5	; 0x05
     e86:	a9 01       	movw	r20, r18
     e88:	4f 5f       	subi	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	5d 83       	std	Y+5, r21	; 0x05
     e8e:	4c 83       	std	Y+4, r20	; 0x04
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	26 27       	eor	r18, r22
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e9e:	9c 01       	movw	r18, r24
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	3b 87       	std	Y+11, r19	; 0x0b
     ea6:	2a 87       	std	Y+10, r18	; 0x0a
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	3a 81       	ldd	r19, Y+2	; 0x02
     eac:	a9 01       	movw	r20, r18
     eae:	4f 5f       	subi	r20, 0xFF	; 255
     eb0:	5f 4f       	sbci	r21, 0xFF	; 255
     eb2:	5a 83       	std	Y+2, r21	; 0x02
     eb4:	49 83       	std	Y+1, r20	; 0x01
     eb6:	f9 01       	movw	r30, r18
     eb8:	60 81       	ld	r22, Z
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	a9 01       	movw	r20, r18
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	5d 83       	std	Y+5, r21	; 0x05
     ec6:	4c 83       	std	Y+4, r20	; 0x04
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	26 27       	eor	r18, r22
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed6:	9c 01       	movw	r18, r24
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	3b 87       	std	Y+11, r19	; 0x0b
     ede:	2a 87       	std	Y+10, r18	; 0x0a
     ee0:	29 81       	ldd	r18, Y+1	; 0x01
     ee2:	3a 81       	ldd	r19, Y+2	; 0x02
     ee4:	a9 01       	movw	r20, r18
     ee6:	4f 5f       	subi	r20, 0xFF	; 255
     ee8:	5f 4f       	sbci	r21, 0xFF	; 255
     eea:	5a 83       	std	Y+2, r21	; 0x02
     eec:	49 83       	std	Y+1, r20	; 0x01
     eee:	f9 01       	movw	r30, r18
     ef0:	60 81       	ld	r22, Z
     ef2:	2c 81       	ldd	r18, Y+4	; 0x04
     ef4:	3d 81       	ldd	r19, Y+5	; 0x05
     ef6:	a9 01       	movw	r20, r18
     ef8:	4f 5f       	subi	r20, 0xFF	; 255
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	5d 83       	std	Y+5, r21	; 0x05
     efe:	4c 83       	std	Y+4, r20	; 0x04
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	26 27       	eor	r18, r22
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0e:	9c 01       	movw	r18, r24
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	3b 87       	std	Y+11, r19	; 0x0b
     f16:	2a 87       	std	Y+10, r18	; 0x0a
     f18:	29 81       	ldd	r18, Y+1	; 0x01
     f1a:	3a 81       	ldd	r19, Y+2	; 0x02
     f1c:	a9 01       	movw	r20, r18
     f1e:	4f 5f       	subi	r20, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	5a 83       	std	Y+2, r21	; 0x02
     f24:	49 83       	std	Y+1, r20	; 0x01
     f26:	f9 01       	movw	r30, r18
     f28:	60 81       	ld	r22, Z
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	a9 01       	movw	r20, r18
     f30:	4f 5f       	subi	r20, 0xFF	; 255
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	5d 83       	std	Y+5, r21	; 0x05
     f36:	4c 83       	std	Y+4, r20	; 0x04
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	26 27       	eor	r18, r22
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f42:	8a 85       	ldd	r24, Y+10	; 0x0a
     f44:	9b 85       	ldd	r25, Y+11	; 0x0b
     f46:	9c 01       	movw	r18, r24
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	3b 87       	std	Y+11, r19	; 0x0b
     f4e:	2a 87       	std	Y+10, r18	; 0x0a
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	a9 01       	movw	r20, r18
     f56:	4f 5f       	subi	r20, 0xFF	; 255
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	5a 83       	std	Y+2, r21	; 0x02
     f5c:	49 83       	std	Y+1, r20	; 0x01
     f5e:	f9 01       	movw	r30, r18
     f60:	60 81       	ld	r22, Z
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	a9 01       	movw	r20, r18
     f68:	4f 5f       	subi	r20, 0xFF	; 255
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	5d 83       	std	Y+5, r21	; 0x05
     f6e:	4c 83       	std	Y+4, r20	; 0x04
     f70:	f9 01       	movw	r30, r18
     f72:	20 81       	ld	r18, Z
     f74:	26 27       	eor	r18, r22
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7e:	9c 01       	movw	r18, r24
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	3b 87       	std	Y+11, r19	; 0x0b
     f86:	2a 87       	std	Y+10, r18	; 0x0a
     f88:	29 81       	ldd	r18, Y+1	; 0x01
     f8a:	3a 81       	ldd	r19, Y+2	; 0x02
     f8c:	a9 01       	movw	r20, r18
     f8e:	4f 5f       	subi	r20, 0xFF	; 255
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	5a 83       	std	Y+2, r21	; 0x02
     f94:	49 83       	std	Y+1, r20	; 0x01
     f96:	f9 01       	movw	r30, r18
     f98:	60 81       	ld	r22, Z
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	a9 01       	movw	r20, r18
     fa0:	4f 5f       	subi	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	5d 83       	std	Y+5, r21	; 0x05
     fa6:	4c 83       	std	Y+4, r20	; 0x04
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	26 27       	eor	r18, r22
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
    uint8_t i;

  

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	8a 30       	cpi	r24, 0x0A	; 10
     fbc:	08 f4       	brcc	.+2      	; 0xfc0 <aes_key_schedule_128+0x412>
     fbe:	0a ce       	rjmp	.-1004   	; 0xbd4 <aes_key_schedule_128+0x26>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
     fc0:	00 00       	nop
     fc2:	2b 96       	adiw	r28, 0x0b	; 11
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(int argc, char *argv[]) {
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	e4 97       	sbiw	r28, 0x34	; 52
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	9a ab       	std	Y+50, r25	; 0x32
     fea:	89 ab       	std	Y+49, r24	; 0x31
     fec:	7c ab       	std	Y+52, r23	; 0x34
     fee:	6b ab       	std	Y+51, r22	; 0x33


	/* 128 bit key */
	

	uint8_t plaintext[] = {
     ff0:	20 e1       	ldi	r18, 0x10	; 16
     ff2:	ea e0       	ldi	r30, 0x0A	; 10
     ff4:	f3 e0       	ldi	r31, 0x03	; 3
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	dc 01       	movw	r26, r24
     ffc:	01 90       	ld	r0, Z+
     ffe:	0d 92       	st	X+, r0
    1000:	2a 95       	dec	r18
    1002:	e1 f7       	brne	.-8      	; 0xffc <main+0x28>
		//0x69, 0x34, 0xab, 0x43, 0x64, 0x14, 0x8f, 0xb9,
		0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
		0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
	};*/
	
	uint8_t roundkeys[16]={
    1004:	80 e1       	ldi	r24, 0x10	; 16
    1006:	ea e1       	ldi	r30, 0x1A	; 26
    1008:	f3 e0       	ldi	r31, 0x03	; 3
    100a:	de 01       	movw	r26, r28
    100c:	91 96       	adiw	r26, 0x21	; 33
    100e:	01 90       	ld	r0, Z+
    1010:	0d 92       	st	X+, r0
    1012:	8a 95       	dec	r24
    1014:	e1 f7       	brne	.-8      	; 0x100e <main+0x3a>
   //void (*F_AES[3])() = {aes_key_schedule_128,aes_encrypt_128,aes_decrypt_128};
	 //  F_AES[0](roundkeys);
	 //  F_AES[1](roundkeys,plaintext,ciphertext);
	   //F_AES[2](roundkeys, ciphertext, ciphertext);
	// key schedule
	aes_key_schedule_128(roundkeys);
    1016:	ce 01       	movw	r24, r28
    1018:	81 96       	adiw	r24, 0x21	; 33
    101a:	0e 94 d7 05 	call	0xbae	; 0xbae <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
    101e:	9e 01       	movw	r18, r28
    1020:	2f 5e       	subi	r18, 0xEF	; 239
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	ce 01       	movw	r24, r28
    1026:	81 96       	adiw	r24, 0x21	; 33
    1028:	a9 01       	movw	r20, r18
    102a:	9e 01       	movw	r18, r28
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 f6 03 	call	0x7ec	; 0x7ec <aes_encrypt_128>


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    1036:	ae 01       	movw	r20, r28
    1038:	4f 5e       	subi	r20, 0xEF	; 239
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	9e 01       	movw	r18, r28
    103e:	2f 5e       	subi	r18, 0xEF	; 239
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	ce 01       	movw	r24, r28
    1044:	81 96       	adiw	r24, 0x21	; 33
    1046:	b9 01       	movw	r22, r18
    1048:	0e 94 da 00 	call	0x1b4	; 0x1b4 <aes_decrypt_128>
	

	return 0;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
}
    1050:	e4 96       	adiw	r28, 0x34	; 52
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <_exit>:
    1062:	f8 94       	cli

00001064 <__stop_program>:
    1064:	ff cf       	rjmp	.-2      	; 0x1064 <__stop_program>
